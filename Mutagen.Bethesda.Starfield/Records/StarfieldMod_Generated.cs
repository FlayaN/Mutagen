/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Parameters;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Cache.Internals;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Masters;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Loqui;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Strings.DI;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.IO.Abstractions;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Threading.Tasks;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class StarfieldMod :
        IEquatable<IStarfieldModGetter>,
        ILoquiObjectSetter<StarfieldMod>,
        IStarfieldMod
    {
        #region Ctor
        protected StarfieldMod()
        {
            _GameSettings_Object = new StarfieldGroup<GameSetting>(this);
            _Keywords_Object = new StarfieldGroup<Keyword>(this);
            _FFKW_Object = new StarfieldGroup<FFKWRecord>(this);
            _LocationReferenceTypes_Object = new StarfieldGroup<LocationReferenceType>(this);
            _Actions_Object = new StarfieldGroup<ActionRecord>(this);
            _Transforms_Object = new StarfieldGroup<Transform>(this);
            _TextureSets_Object = new StarfieldGroup<TextureSet>(this);
            _Globals_Object = new StarfieldGroup<Global>(this);
            _DamageTypes_Object = new StarfieldGroup<DamageType>(this);
            _Classes_Object = new StarfieldGroup<Class>(this);
            _Factions_Object = new StarfieldGroup<Faction>(this);
            _AffinityEvents_Object = new StarfieldGroup<AffinityEvent>(this);
            _HeadParts_Object = new StarfieldGroup<HeadPart>(this);
            _Races_Object = new StarfieldGroup<Race>(this);
            _AudioOcclusionPrimitives_Object = new StarfieldGroup<AudioOcclusionPrimitive>(this);
            _Planets_Object = new StarfieldGroup<Planet>(this);
            _SurfacePatternStyles_Object = new StarfieldGroup<SurfacePatternStyle>(this);
            _Debris_Object = new StarfieldGroup<Debris>(this);
            _ActorValueModulations_Object = new StarfieldGroup<ActorValueModulation>(this);
            _BiomeSwaps_Object = new StarfieldGroup<BiomeSwap>(this);
            _BoneModifiers_Object = new StarfieldGroup<BoneModifier>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly StarfieldModHeader _ModHeader_Object = new StarfieldModHeader();
        public StarfieldModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldModHeaderGetter IStarfieldModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<GameSetting> _GameSettings_Object;
        public StarfieldGroup<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGameSettingGetter> IStarfieldModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Keyword> _Keywords_Object;
        public StarfieldGroup<Keyword> Keywords => _Keywords_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IKeywordGetter> IStarfieldModGetter.Keywords => _Keywords_Object;
        #endregion
        #region FFKW
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<FFKWRecord> _FFKW_Object;
        public StarfieldGroup<FFKWRecord> FFKW => _FFKW_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFFKWRecordGetter> IStarfieldModGetter.FFKW => _FFKW_Object;
        #endregion
        #region LocationReferenceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LocationReferenceType> _LocationReferenceTypes_Object;
        public StarfieldGroup<LocationReferenceType> LocationReferenceTypes => _LocationReferenceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILocationReferenceTypeGetter> IStarfieldModGetter.LocationReferenceTypes => _LocationReferenceTypes_Object;
        #endregion
        #region Actions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ActionRecord> _Actions_Object;
        public StarfieldGroup<ActionRecord> Actions => _Actions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IActionRecordGetter> IStarfieldModGetter.Actions => _Actions_Object;
        #endregion
        #region Transforms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Transform> _Transforms_Object;
        public StarfieldGroup<Transform> Transforms => _Transforms_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ITransformGetter> IStarfieldModGetter.Transforms => _Transforms_Object;
        #endregion
        #region TextureSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<TextureSet> _TextureSets_Object;
        public StarfieldGroup<TextureSet> TextureSets => _TextureSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ITextureSetGetter> IStarfieldModGetter.TextureSets => _TextureSets_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Global> _Globals_Object;
        public StarfieldGroup<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGlobalGetter> IStarfieldModGetter.Globals => _Globals_Object;
        #endregion
        #region DamageTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<DamageType> _DamageTypes_Object;
        public StarfieldGroup<DamageType> DamageTypes => _DamageTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IDamageTypeGetter> IStarfieldModGetter.DamageTypes => _DamageTypes_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Class> _Classes_Object;
        public StarfieldGroup<Class> Classes => _Classes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IClassGetter> IStarfieldModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Faction> _Factions_Object;
        public StarfieldGroup<Faction> Factions => _Factions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFactionGetter> IStarfieldModGetter.Factions => _Factions_Object;
        #endregion
        #region AffinityEvents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AffinityEvent> _AffinityEvents_Object;
        public StarfieldGroup<AffinityEvent> AffinityEvents => _AffinityEvents_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAffinityEventGetter> IStarfieldModGetter.AffinityEvents => _AffinityEvents_Object;
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<HeadPart> _HeadParts_Object;
        public StarfieldGroup<HeadPart> HeadParts => _HeadParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IHeadPartGetter> IStarfieldModGetter.HeadParts => _HeadParts_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Race> _Races_Object;
        public StarfieldGroup<Race> Races => _Races_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IRaceGetter> IStarfieldModGetter.Races => _Races_Object;
        #endregion
        #region AudioOcclusionPrimitives
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AudioOcclusionPrimitive> _AudioOcclusionPrimitives_Object;
        public StarfieldGroup<AudioOcclusionPrimitive> AudioOcclusionPrimitives => _AudioOcclusionPrimitives_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAudioOcclusionPrimitiveGetter> IStarfieldModGetter.AudioOcclusionPrimitives => _AudioOcclusionPrimitives_Object;
        #endregion
        #region Planets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Planet> _Planets_Object;
        public StarfieldGroup<Planet> Planets => _Planets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IPlanetGetter> IStarfieldModGetter.Planets => _Planets_Object;
        #endregion
        #region SurfacePatternStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SurfacePatternStyle> _SurfacePatternStyles_Object;
        public StarfieldGroup<SurfacePatternStyle> SurfacePatternStyles => _SurfacePatternStyles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISurfacePatternStyleGetter> IStarfieldModGetter.SurfacePatternStyles => _SurfacePatternStyles_Object;
        #endregion
        #region Debris
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Debris> _Debris_Object;
        public StarfieldGroup<Debris> Debris => _Debris_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IDebrisGetter> IStarfieldModGetter.Debris => _Debris_Object;
        #endregion
        #region ActorValueModulations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ActorValueModulation> _ActorValueModulations_Object;
        public StarfieldGroup<ActorValueModulation> ActorValueModulations => _ActorValueModulations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IActorValueModulationGetter> IStarfieldModGetter.ActorValueModulations => _ActorValueModulations_Object;
        #endregion
        #region BiomeSwaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<BiomeSwap> _BiomeSwaps_Object;
        public StarfieldGroup<BiomeSwap> BiomeSwaps => _BiomeSwaps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IBiomeSwapGetter> IStarfieldModGetter.BiomeSwaps => _BiomeSwaps_Object;
        #endregion
        #region BoneModifiers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<BoneModifier> _BoneModifiers_Object;
        public StarfieldGroup<BoneModifier> BoneModifiers => _BoneModifiers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IBoneModifierGetter> IStarfieldModGetter.BoneModifiers => _BoneModifiers_Object;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarfieldModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStarfieldModGetter rhs) return false;
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarfieldModGetter? obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, StarfieldModHeader.Mask<TItem>?>(initialValue, new StarfieldModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.FFKW = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LocationReferenceTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Actions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Transforms = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.TextureSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Globals = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.DamageTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Classes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AffinityEvents = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.HeadParts = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Races = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AudioOcclusionPrimitives = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Planets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SurfacePatternStyles = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Debris = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ActorValueModulations = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.BiomeSwaps = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.BoneModifiers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem Keywords,
                TItem FFKW,
                TItem LocationReferenceTypes,
                TItem Actions,
                TItem Transforms,
                TItem TextureSets,
                TItem Globals,
                TItem DamageTypes,
                TItem Classes,
                TItem Factions,
                TItem AffinityEvents,
                TItem HeadParts,
                TItem Races,
                TItem AudioOcclusionPrimitives,
                TItem Planets,
                TItem SurfacePatternStyles,
                TItem Debris,
                TItem ActorValueModulations,
                TItem BiomeSwaps,
                TItem BoneModifiers)
            {
                this.ModHeader = new MaskItem<TItem, StarfieldModHeader.Mask<TItem>?>(ModHeader, new StarfieldModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(GameSettings, new StarfieldGroup.Mask<TItem>(GameSettings));
                this.Keywords = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Keywords, new StarfieldGroup.Mask<TItem>(Keywords));
                this.FFKW = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(FFKW, new StarfieldGroup.Mask<TItem>(FFKW));
                this.LocationReferenceTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LocationReferenceTypes, new StarfieldGroup.Mask<TItem>(LocationReferenceTypes));
                this.Actions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Actions, new StarfieldGroup.Mask<TItem>(Actions));
                this.Transforms = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Transforms, new StarfieldGroup.Mask<TItem>(Transforms));
                this.TextureSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(TextureSets, new StarfieldGroup.Mask<TItem>(TextureSets));
                this.Globals = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Globals, new StarfieldGroup.Mask<TItem>(Globals));
                this.DamageTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(DamageTypes, new StarfieldGroup.Mask<TItem>(DamageTypes));
                this.Classes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Classes, new StarfieldGroup.Mask<TItem>(Classes));
                this.Factions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Factions, new StarfieldGroup.Mask<TItem>(Factions));
                this.AffinityEvents = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AffinityEvents, new StarfieldGroup.Mask<TItem>(AffinityEvents));
                this.HeadParts = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(HeadParts, new StarfieldGroup.Mask<TItem>(HeadParts));
                this.Races = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Races, new StarfieldGroup.Mask<TItem>(Races));
                this.AudioOcclusionPrimitives = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AudioOcclusionPrimitives, new StarfieldGroup.Mask<TItem>(AudioOcclusionPrimitives));
                this.Planets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Planets, new StarfieldGroup.Mask<TItem>(Planets));
                this.SurfacePatternStyles = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SurfacePatternStyles, new StarfieldGroup.Mask<TItem>(SurfacePatternStyles));
                this.Debris = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Debris, new StarfieldGroup.Mask<TItem>(Debris));
                this.ActorValueModulations = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ActorValueModulations, new StarfieldGroup.Mask<TItem>(ActorValueModulations));
                this.BiomeSwaps = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(BiomeSwaps, new StarfieldGroup.Mask<TItem>(BiomeSwaps));
                this.BoneModifiers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(BoneModifiers, new StarfieldGroup.Mask<TItem>(BoneModifiers));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, StarfieldModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Keywords { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? FFKW { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LocationReferenceTypes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Actions { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Transforms { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? TextureSets { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Globals { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? DamageTypes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Classes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Factions { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AffinityEvents { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? HeadParts { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Races { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AudioOcclusionPrimitives { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Planets { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SurfacePatternStyles { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Debris { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ActorValueModulations { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? BiomeSwaps { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? BoneModifiers { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.FFKW, rhs.FFKW)) return false;
                if (!object.Equals(this.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
                if (!object.Equals(this.Actions, rhs.Actions)) return false;
                if (!object.Equals(this.Transforms, rhs.Transforms)) return false;
                if (!object.Equals(this.TextureSets, rhs.TextureSets)) return false;
                if (!object.Equals(this.Globals, rhs.Globals)) return false;
                if (!object.Equals(this.DamageTypes, rhs.DamageTypes)) return false;
                if (!object.Equals(this.Classes, rhs.Classes)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.AffinityEvents, rhs.AffinityEvents)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.Races, rhs.Races)) return false;
                if (!object.Equals(this.AudioOcclusionPrimitives, rhs.AudioOcclusionPrimitives)) return false;
                if (!object.Equals(this.Planets, rhs.Planets)) return false;
                if (!object.Equals(this.SurfacePatternStyles, rhs.SurfacePatternStyles)) return false;
                if (!object.Equals(this.Debris, rhs.Debris)) return false;
                if (!object.Equals(this.ActorValueModulations, rhs.ActorValueModulations)) return false;
                if (!object.Equals(this.BiomeSwaps, rhs.BiomeSwaps)) return false;
                if (!object.Equals(this.BoneModifiers, rhs.BoneModifiers)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.Keywords);
                hash.Add(this.FFKW);
                hash.Add(this.LocationReferenceTypes);
                hash.Add(this.Actions);
                hash.Add(this.Transforms);
                hash.Add(this.TextureSets);
                hash.Add(this.Globals);
                hash.Add(this.DamageTypes);
                hash.Add(this.Classes);
                hash.Add(this.Factions);
                hash.Add(this.AffinityEvents);
                hash.Add(this.HeadParts);
                hash.Add(this.Races);
                hash.Add(this.AudioOcclusionPrimitives);
                hash.Add(this.Planets);
                hash.Add(this.SurfacePatternStyles);
                hash.Add(this.Debris);
                hash.Add(this.ActorValueModulations);
                hash.Add(this.BiomeSwaps);
                hash.Add(this.BoneModifiers);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null && !this.Keywords.Specific.All(eval)) return false;
                }
                if (FFKW != null)
                {
                    if (!eval(this.FFKW.Overall)) return false;
                    if (this.FFKW.Specific != null && !this.FFKW.Specific.All(eval)) return false;
                }
                if (LocationReferenceTypes != null)
                {
                    if (!eval(this.LocationReferenceTypes.Overall)) return false;
                    if (this.LocationReferenceTypes.Specific != null && !this.LocationReferenceTypes.Specific.All(eval)) return false;
                }
                if (Actions != null)
                {
                    if (!eval(this.Actions.Overall)) return false;
                    if (this.Actions.Specific != null && !this.Actions.Specific.All(eval)) return false;
                }
                if (Transforms != null)
                {
                    if (!eval(this.Transforms.Overall)) return false;
                    if (this.Transforms.Specific != null && !this.Transforms.Specific.All(eval)) return false;
                }
                if (TextureSets != null)
                {
                    if (!eval(this.TextureSets.Overall)) return false;
                    if (this.TextureSets.Specific != null && !this.TextureSets.Specific.All(eval)) return false;
                }
                if (Globals != null)
                {
                    if (!eval(this.Globals.Overall)) return false;
                    if (this.Globals.Specific != null && !this.Globals.Specific.All(eval)) return false;
                }
                if (DamageTypes != null)
                {
                    if (!eval(this.DamageTypes.Overall)) return false;
                    if (this.DamageTypes.Specific != null && !this.DamageTypes.Specific.All(eval)) return false;
                }
                if (Classes != null)
                {
                    if (!eval(this.Classes.Overall)) return false;
                    if (this.Classes.Specific != null && !this.Classes.Specific.All(eval)) return false;
                }
                if (Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null && !this.Factions.Specific.All(eval)) return false;
                }
                if (AffinityEvents != null)
                {
                    if (!eval(this.AffinityEvents.Overall)) return false;
                    if (this.AffinityEvents.Specific != null && !this.AffinityEvents.Specific.All(eval)) return false;
                }
                if (HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null && !this.HeadParts.Specific.All(eval)) return false;
                }
                if (Races != null)
                {
                    if (!eval(this.Races.Overall)) return false;
                    if (this.Races.Specific != null && !this.Races.Specific.All(eval)) return false;
                }
                if (AudioOcclusionPrimitives != null)
                {
                    if (!eval(this.AudioOcclusionPrimitives.Overall)) return false;
                    if (this.AudioOcclusionPrimitives.Specific != null && !this.AudioOcclusionPrimitives.Specific.All(eval)) return false;
                }
                if (Planets != null)
                {
                    if (!eval(this.Planets.Overall)) return false;
                    if (this.Planets.Specific != null && !this.Planets.Specific.All(eval)) return false;
                }
                if (SurfacePatternStyles != null)
                {
                    if (!eval(this.SurfacePatternStyles.Overall)) return false;
                    if (this.SurfacePatternStyles.Specific != null && !this.SurfacePatternStyles.Specific.All(eval)) return false;
                }
                if (Debris != null)
                {
                    if (!eval(this.Debris.Overall)) return false;
                    if (this.Debris.Specific != null && !this.Debris.Specific.All(eval)) return false;
                }
                if (ActorValueModulations != null)
                {
                    if (!eval(this.ActorValueModulations.Overall)) return false;
                    if (this.ActorValueModulations.Specific != null && !this.ActorValueModulations.Specific.All(eval)) return false;
                }
                if (BiomeSwaps != null)
                {
                    if (!eval(this.BiomeSwaps.Overall)) return false;
                    if (this.BiomeSwaps.Specific != null && !this.BiomeSwaps.Specific.All(eval)) return false;
                }
                if (BoneModifiers != null)
                {
                    if (!eval(this.BoneModifiers.Overall)) return false;
                    if (this.BoneModifiers.Specific != null && !this.BoneModifiers.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null && this.Keywords.Specific.Any(eval)) return true;
                }
                if (FFKW != null)
                {
                    if (eval(this.FFKW.Overall)) return true;
                    if (this.FFKW.Specific != null && this.FFKW.Specific.Any(eval)) return true;
                }
                if (LocationReferenceTypes != null)
                {
                    if (eval(this.LocationReferenceTypes.Overall)) return true;
                    if (this.LocationReferenceTypes.Specific != null && this.LocationReferenceTypes.Specific.Any(eval)) return true;
                }
                if (Actions != null)
                {
                    if (eval(this.Actions.Overall)) return true;
                    if (this.Actions.Specific != null && this.Actions.Specific.Any(eval)) return true;
                }
                if (Transforms != null)
                {
                    if (eval(this.Transforms.Overall)) return true;
                    if (this.Transforms.Specific != null && this.Transforms.Specific.Any(eval)) return true;
                }
                if (TextureSets != null)
                {
                    if (eval(this.TextureSets.Overall)) return true;
                    if (this.TextureSets.Specific != null && this.TextureSets.Specific.Any(eval)) return true;
                }
                if (Globals != null)
                {
                    if (eval(this.Globals.Overall)) return true;
                    if (this.Globals.Specific != null && this.Globals.Specific.Any(eval)) return true;
                }
                if (DamageTypes != null)
                {
                    if (eval(this.DamageTypes.Overall)) return true;
                    if (this.DamageTypes.Specific != null && this.DamageTypes.Specific.Any(eval)) return true;
                }
                if (Classes != null)
                {
                    if (eval(this.Classes.Overall)) return true;
                    if (this.Classes.Specific != null && this.Classes.Specific.Any(eval)) return true;
                }
                if (Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null && this.Factions.Specific.Any(eval)) return true;
                }
                if (AffinityEvents != null)
                {
                    if (eval(this.AffinityEvents.Overall)) return true;
                    if (this.AffinityEvents.Specific != null && this.AffinityEvents.Specific.Any(eval)) return true;
                }
                if (HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null && this.HeadParts.Specific.Any(eval)) return true;
                }
                if (Races != null)
                {
                    if (eval(this.Races.Overall)) return true;
                    if (this.Races.Specific != null && this.Races.Specific.Any(eval)) return true;
                }
                if (AudioOcclusionPrimitives != null)
                {
                    if (eval(this.AudioOcclusionPrimitives.Overall)) return true;
                    if (this.AudioOcclusionPrimitives.Specific != null && this.AudioOcclusionPrimitives.Specific.Any(eval)) return true;
                }
                if (Planets != null)
                {
                    if (eval(this.Planets.Overall)) return true;
                    if (this.Planets.Specific != null && this.Planets.Specific.Any(eval)) return true;
                }
                if (SurfacePatternStyles != null)
                {
                    if (eval(this.SurfacePatternStyles.Overall)) return true;
                    if (this.SurfacePatternStyles.Specific != null && this.SurfacePatternStyles.Specific.Any(eval)) return true;
                }
                if (Debris != null)
                {
                    if (eval(this.Debris.Overall)) return true;
                    if (this.Debris.Specific != null && this.Debris.Specific.Any(eval)) return true;
                }
                if (ActorValueModulations != null)
                {
                    if (eval(this.ActorValueModulations.Overall)) return true;
                    if (this.ActorValueModulations.Specific != null && this.ActorValueModulations.Specific.Any(eval)) return true;
                }
                if (BiomeSwaps != null)
                {
                    if (eval(this.BiomeSwaps.Overall)) return true;
                    if (this.BiomeSwaps.Specific != null && this.BiomeSwaps.Specific.Any(eval)) return true;
                }
                if (BoneModifiers != null)
                {
                    if (eval(this.BoneModifiers.Overall)) return true;
                    if (this.BoneModifiers.Specific != null && this.BoneModifiers.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StarfieldMod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, StarfieldModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.Keywords = this.Keywords == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Keywords.Overall), this.Keywords.Specific?.Translate(eval));
                obj.FFKW = this.FFKW == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.FFKW.Overall), this.FFKW.Specific?.Translate(eval));
                obj.LocationReferenceTypes = this.LocationReferenceTypes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LocationReferenceTypes.Overall), this.LocationReferenceTypes.Specific?.Translate(eval));
                obj.Actions = this.Actions == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Actions.Overall), this.Actions.Specific?.Translate(eval));
                obj.Transforms = this.Transforms == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Transforms.Overall), this.Transforms.Specific?.Translate(eval));
                obj.TextureSets = this.TextureSets == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.TextureSets.Overall), this.TextureSets.Specific?.Translate(eval));
                obj.Globals = this.Globals == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
                obj.DamageTypes = this.DamageTypes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.DamageTypes.Overall), this.DamageTypes.Specific?.Translate(eval));
                obj.Classes = this.Classes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Classes.Overall), this.Classes.Specific?.Translate(eval));
                obj.Factions = this.Factions == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Factions.Overall), this.Factions.Specific?.Translate(eval));
                obj.AffinityEvents = this.AffinityEvents == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AffinityEvents.Overall), this.AffinityEvents.Specific?.Translate(eval));
                obj.HeadParts = this.HeadParts == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.HeadParts.Overall), this.HeadParts.Specific?.Translate(eval));
                obj.Races = this.Races == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Races.Overall), this.Races.Specific?.Translate(eval));
                obj.AudioOcclusionPrimitives = this.AudioOcclusionPrimitives == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AudioOcclusionPrimitives.Overall), this.AudioOcclusionPrimitives.Specific?.Translate(eval));
                obj.Planets = this.Planets == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Planets.Overall), this.Planets.Specific?.Translate(eval));
                obj.SurfacePatternStyles = this.SurfacePatternStyles == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SurfacePatternStyles.Overall), this.SurfacePatternStyles.Specific?.Translate(eval));
                obj.Debris = this.Debris == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Debris.Overall), this.Debris.Specific?.Translate(eval));
                obj.ActorValueModulations = this.ActorValueModulations == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ActorValueModulations.Overall), this.ActorValueModulations.Specific?.Translate(eval));
                obj.BiomeSwaps = this.BiomeSwaps == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.BiomeSwaps.Overall), this.BiomeSwaps.Specific?.Translate(eval));
                obj.BoneModifiers = this.BoneModifiers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.BoneModifiers.Overall), this.BoneModifiers.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(StarfieldMod.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, StarfieldMod.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(StarfieldMod.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.Print(sb);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.Print(sb);
                    }
                    if (printMask?.Keywords?.Overall ?? true)
                    {
                        Keywords?.Print(sb);
                    }
                    if (printMask?.FFKW?.Overall ?? true)
                    {
                        FFKW?.Print(sb);
                    }
                    if (printMask?.LocationReferenceTypes?.Overall ?? true)
                    {
                        LocationReferenceTypes?.Print(sb);
                    }
                    if (printMask?.Actions?.Overall ?? true)
                    {
                        Actions?.Print(sb);
                    }
                    if (printMask?.Transforms?.Overall ?? true)
                    {
                        Transforms?.Print(sb);
                    }
                    if (printMask?.TextureSets?.Overall ?? true)
                    {
                        TextureSets?.Print(sb);
                    }
                    if (printMask?.Globals?.Overall ?? true)
                    {
                        Globals?.Print(sb);
                    }
                    if (printMask?.DamageTypes?.Overall ?? true)
                    {
                        DamageTypes?.Print(sb);
                    }
                    if (printMask?.Classes?.Overall ?? true)
                    {
                        Classes?.Print(sb);
                    }
                    if (printMask?.Factions?.Overall ?? true)
                    {
                        Factions?.Print(sb);
                    }
                    if (printMask?.AffinityEvents?.Overall ?? true)
                    {
                        AffinityEvents?.Print(sb);
                    }
                    if (printMask?.HeadParts?.Overall ?? true)
                    {
                        HeadParts?.Print(sb);
                    }
                    if (printMask?.Races?.Overall ?? true)
                    {
                        Races?.Print(sb);
                    }
                    if (printMask?.AudioOcclusionPrimitives?.Overall ?? true)
                    {
                        AudioOcclusionPrimitives?.Print(sb);
                    }
                    if (printMask?.Planets?.Overall ?? true)
                    {
                        Planets?.Print(sb);
                    }
                    if (printMask?.SurfacePatternStyles?.Overall ?? true)
                    {
                        SurfacePatternStyles?.Print(sb);
                    }
                    if (printMask?.Debris?.Overall ?? true)
                    {
                        Debris?.Print(sb);
                    }
                    if (printMask?.ActorValueModulations?.Overall ?? true)
                    {
                        ActorValueModulations?.Print(sb);
                    }
                    if (printMask?.BiomeSwaps?.Overall ?? true)
                    {
                        BiomeSwaps?.Print(sb);
                    }
                    if (printMask?.BoneModifiers?.Overall ?? true)
                    {
                        BoneModifiers?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, StarfieldModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Keyword.ErrorMask>?>? Keywords;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<FFKWRecord.ErrorMask>?>? FFKW;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LocationReferenceType.ErrorMask>?>? LocationReferenceTypes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ActionRecord.ErrorMask>?>? Actions;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Transform.ErrorMask>?>? Transforms;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<TextureSet.ErrorMask>?>? TextureSets;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Global.ErrorMask>?>? Globals;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<DamageType.ErrorMask>?>? DamageTypes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Class.ErrorMask>?>? Classes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Faction.ErrorMask>?>? Factions;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AffinityEvent.ErrorMask>?>? AffinityEvents;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<HeadPart.ErrorMask>?>? HeadParts;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Race.ErrorMask>?>? Races;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AudioOcclusionPrimitive.ErrorMask>?>? AudioOcclusionPrimitives;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Planet.ErrorMask>?>? Planets;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePatternStyle.ErrorMask>?>? SurfacePatternStyles;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Debris.ErrorMask>?>? Debris;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ActorValueModulation.ErrorMask>?>? ActorValueModulations;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<BiomeSwap.ErrorMask>?>? BiomeSwaps;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<BoneModifier.ErrorMask>?>? BoneModifiers;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                StarfieldMod_FieldIndex enu = (StarfieldMod_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldMod_FieldIndex.ModHeader:
                        return ModHeader;
                    case StarfieldMod_FieldIndex.GameSettings:
                        return GameSettings;
                    case StarfieldMod_FieldIndex.Keywords:
                        return Keywords;
                    case StarfieldMod_FieldIndex.FFKW:
                        return FFKW;
                    case StarfieldMod_FieldIndex.LocationReferenceTypes:
                        return LocationReferenceTypes;
                    case StarfieldMod_FieldIndex.Actions:
                        return Actions;
                    case StarfieldMod_FieldIndex.Transforms:
                        return Transforms;
                    case StarfieldMod_FieldIndex.TextureSets:
                        return TextureSets;
                    case StarfieldMod_FieldIndex.Globals:
                        return Globals;
                    case StarfieldMod_FieldIndex.DamageTypes:
                        return DamageTypes;
                    case StarfieldMod_FieldIndex.Classes:
                        return Classes;
                    case StarfieldMod_FieldIndex.Factions:
                        return Factions;
                    case StarfieldMod_FieldIndex.AffinityEvents:
                        return AffinityEvents;
                    case StarfieldMod_FieldIndex.HeadParts:
                        return HeadParts;
                    case StarfieldMod_FieldIndex.Races:
                        return Races;
                    case StarfieldMod_FieldIndex.AudioOcclusionPrimitives:
                        return AudioOcclusionPrimitives;
                    case StarfieldMod_FieldIndex.Planets:
                        return Planets;
                    case StarfieldMod_FieldIndex.SurfacePatternStyles:
                        return SurfacePatternStyles;
                    case StarfieldMod_FieldIndex.Debris:
                        return Debris;
                    case StarfieldMod_FieldIndex.ActorValueModulations:
                        return ActorValueModulations;
                    case StarfieldMod_FieldIndex.BiomeSwaps:
                        return BiomeSwaps;
                    case StarfieldMod_FieldIndex.BoneModifiers:
                        return BoneModifiers;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                StarfieldMod_FieldIndex enu = (StarfieldMod_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldMod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, StarfieldModHeader.ErrorMask?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, StarfieldGroup.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Keyword.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.FFKW:
                        this.FFKW = new MaskItem<Exception?, StarfieldGroup.ErrorMask<FFKWRecord.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LocationReferenceType.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Actions:
                        this.Actions = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ActionRecord.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Transforms:
                        this.Transforms = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Transform.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.TextureSets:
                        this.TextureSets = new MaskItem<Exception?, StarfieldGroup.ErrorMask<TextureSet.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Globals:
                        this.Globals = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Global.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.DamageTypes:
                        this.DamageTypes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<DamageType.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Classes:
                        this.Classes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Class.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Faction.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AffinityEvents:
                        this.AffinityEvents = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AffinityEvent.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, StarfieldGroup.ErrorMask<HeadPart.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Races:
                        this.Races = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Race.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AudioOcclusionPrimitives:
                        this.AudioOcclusionPrimitives = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AudioOcclusionPrimitive.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Planets:
                        this.Planets = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Planet.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SurfacePatternStyles:
                        this.SurfacePatternStyles = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePatternStyle.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Debris:
                        this.Debris = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Debris.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ActorValueModulations:
                        this.ActorValueModulations = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ActorValueModulation.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.BiomeSwaps:
                        this.BiomeSwaps = new MaskItem<Exception?, StarfieldGroup.ErrorMask<BiomeSwap.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.BoneModifiers:
                        this.BoneModifiers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<BoneModifier.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                StarfieldMod_FieldIndex enu = (StarfieldMod_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldMod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, StarfieldModHeader.ErrorMask?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, StarfieldGroup.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Keyword.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.FFKW:
                        this.FFKW = (MaskItem<Exception?, StarfieldGroup.ErrorMask<FFKWRecord.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LocationReferenceType.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Actions:
                        this.Actions = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ActionRecord.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Transforms:
                        this.Transforms = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Transform.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.TextureSets:
                        this.TextureSets = (MaskItem<Exception?, StarfieldGroup.ErrorMask<TextureSet.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Globals:
                        this.Globals = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Global.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.DamageTypes:
                        this.DamageTypes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<DamageType.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Classes:
                        this.Classes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Class.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Faction.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AffinityEvents:
                        this.AffinityEvents = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AffinityEvent.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, StarfieldGroup.ErrorMask<HeadPart.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Races:
                        this.Races = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Race.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AudioOcclusionPrimitives:
                        this.AudioOcclusionPrimitives = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AudioOcclusionPrimitive.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Planets:
                        this.Planets = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Planet.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SurfacePatternStyles:
                        this.SurfacePatternStyles = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePatternStyle.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Debris:
                        this.Debris = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Debris.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ActorValueModulations:
                        this.ActorValueModulations = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ActorValueModulation.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.BiomeSwaps:
                        this.BiomeSwaps = (MaskItem<Exception?, StarfieldGroup.ErrorMask<BiomeSwap.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.BoneModifiers:
                        this.BoneModifiers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<BoneModifier.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (Keywords != null) return true;
                if (FFKW != null) return true;
                if (LocationReferenceTypes != null) return true;
                if (Actions != null) return true;
                if (Transforms != null) return true;
                if (TextureSets != null) return true;
                if (Globals != null) return true;
                if (DamageTypes != null) return true;
                if (Classes != null) return true;
                if (Factions != null) return true;
                if (AffinityEvents != null) return true;
                if (HeadParts != null) return true;
                if (Races != null) return true;
                if (AudioOcclusionPrimitives != null) return true;
                if (Planets != null) return true;
                if (SurfacePatternStyles != null) return true;
                if (Debris != null) return true;
                if (ActorValueModulations != null) return true;
                if (BiomeSwaps != null) return true;
                if (BoneModifiers != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                ModHeader?.Print(sb);
                GameSettings?.Print(sb);
                Keywords?.Print(sb);
                FFKW?.Print(sb);
                LocationReferenceTypes?.Print(sb);
                Actions?.Print(sb);
                Transforms?.Print(sb);
                TextureSets?.Print(sb);
                Globals?.Print(sb);
                DamageTypes?.Print(sb);
                Classes?.Print(sb);
                Factions?.Print(sb);
                AffinityEvents?.Print(sb);
                HeadParts?.Print(sb);
                Races?.Print(sb);
                AudioOcclusionPrimitives?.Print(sb);
                Planets?.Print(sb);
                SurfacePatternStyles?.Print(sb);
                Debris?.Print(sb);
                ActorValueModulations?.Print(sb);
                BiomeSwaps?.Print(sb);
                BoneModifiers?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.Keywords = this.Keywords.Combine(rhs.Keywords, (l, r) => l.Combine(r));
                ret.FFKW = this.FFKW.Combine(rhs.FFKW, (l, r) => l.Combine(r));
                ret.LocationReferenceTypes = this.LocationReferenceTypes.Combine(rhs.LocationReferenceTypes, (l, r) => l.Combine(r));
                ret.Actions = this.Actions.Combine(rhs.Actions, (l, r) => l.Combine(r));
                ret.Transforms = this.Transforms.Combine(rhs.Transforms, (l, r) => l.Combine(r));
                ret.TextureSets = this.TextureSets.Combine(rhs.TextureSets, (l, r) => l.Combine(r));
                ret.Globals = this.Globals.Combine(rhs.Globals, (l, r) => l.Combine(r));
                ret.DamageTypes = this.DamageTypes.Combine(rhs.DamageTypes, (l, r) => l.Combine(r));
                ret.Classes = this.Classes.Combine(rhs.Classes, (l, r) => l.Combine(r));
                ret.Factions = this.Factions.Combine(rhs.Factions, (l, r) => l.Combine(r));
                ret.AffinityEvents = this.AffinityEvents.Combine(rhs.AffinityEvents, (l, r) => l.Combine(r));
                ret.HeadParts = this.HeadParts.Combine(rhs.HeadParts, (l, r) => l.Combine(r));
                ret.Races = this.Races.Combine(rhs.Races, (l, r) => l.Combine(r));
                ret.AudioOcclusionPrimitives = this.AudioOcclusionPrimitives.Combine(rhs.AudioOcclusionPrimitives, (l, r) => l.Combine(r));
                ret.Planets = this.Planets.Combine(rhs.Planets, (l, r) => l.Combine(r));
                ret.SurfacePatternStyles = this.SurfacePatternStyles.Combine(rhs.SurfacePatternStyles, (l, r) => l.Combine(r));
                ret.Debris = this.Debris.Combine(rhs.Debris, (l, r) => l.Combine(r));
                ret.ActorValueModulations = this.ActorValueModulations.Combine(rhs.ActorValueModulations, (l, r) => l.Combine(r));
                ret.BiomeSwaps = this.BiomeSwaps.Combine(rhs.BiomeSwaps, (l, r) => l.Combine(r));
                ret.BoneModifiers = this.BoneModifiers.Combine(rhs.BoneModifiers, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public StarfieldModHeader.TranslationMask? ModHeader;
            public StarfieldGroup.TranslationMask<GameSetting.TranslationMask>? GameSettings;
            public StarfieldGroup.TranslationMask<Keyword.TranslationMask>? Keywords;
            public StarfieldGroup.TranslationMask<FFKWRecord.TranslationMask>? FFKW;
            public StarfieldGroup.TranslationMask<LocationReferenceType.TranslationMask>? LocationReferenceTypes;
            public StarfieldGroup.TranslationMask<ActionRecord.TranslationMask>? Actions;
            public StarfieldGroup.TranslationMask<Transform.TranslationMask>? Transforms;
            public StarfieldGroup.TranslationMask<TextureSet.TranslationMask>? TextureSets;
            public StarfieldGroup.TranslationMask<Global.TranslationMask>? Globals;
            public StarfieldGroup.TranslationMask<DamageType.TranslationMask>? DamageTypes;
            public StarfieldGroup.TranslationMask<Class.TranslationMask>? Classes;
            public StarfieldGroup.TranslationMask<Faction.TranslationMask>? Factions;
            public StarfieldGroup.TranslationMask<AffinityEvent.TranslationMask>? AffinityEvents;
            public StarfieldGroup.TranslationMask<HeadPart.TranslationMask>? HeadParts;
            public StarfieldGroup.TranslationMask<Race.TranslationMask>? Races;
            public StarfieldGroup.TranslationMask<AudioOcclusionPrimitive.TranslationMask>? AudioOcclusionPrimitives;
            public StarfieldGroup.TranslationMask<Planet.TranslationMask>? Planets;
            public StarfieldGroup.TranslationMask<SurfacePatternStyle.TranslationMask>? SurfacePatternStyles;
            public StarfieldGroup.TranslationMask<Debris.TranslationMask>? Debris;
            public StarfieldGroup.TranslationMask<ActorValueModulation.TranslationMask>? ActorValueModulations;
            public StarfieldGroup.TranslationMask<BiomeSwap.TranslationMask>? BiomeSwaps;
            public StarfieldGroup.TranslationMask<BoneModifier.TranslationMask>? BoneModifiers;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader != null ? ModHeader.OnOverall : DefaultOn, ModHeader?.GetCrystal()));
                ret.Add((GameSettings != null ? GameSettings.OnOverall : DefaultOn, GameSettings?.GetCrystal()));
                ret.Add((Keywords != null ? Keywords.OnOverall : DefaultOn, Keywords?.GetCrystal()));
                ret.Add((FFKW != null ? FFKW.OnOverall : DefaultOn, FFKW?.GetCrystal()));
                ret.Add((LocationReferenceTypes != null ? LocationReferenceTypes.OnOverall : DefaultOn, LocationReferenceTypes?.GetCrystal()));
                ret.Add((Actions != null ? Actions.OnOverall : DefaultOn, Actions?.GetCrystal()));
                ret.Add((Transforms != null ? Transforms.OnOverall : DefaultOn, Transforms?.GetCrystal()));
                ret.Add((TextureSets != null ? TextureSets.OnOverall : DefaultOn, TextureSets?.GetCrystal()));
                ret.Add((Globals != null ? Globals.OnOverall : DefaultOn, Globals?.GetCrystal()));
                ret.Add((DamageTypes != null ? DamageTypes.OnOverall : DefaultOn, DamageTypes?.GetCrystal()));
                ret.Add((Classes != null ? Classes.OnOverall : DefaultOn, Classes?.GetCrystal()));
                ret.Add((Factions != null ? Factions.OnOverall : DefaultOn, Factions?.GetCrystal()));
                ret.Add((AffinityEvents != null ? AffinityEvents.OnOverall : DefaultOn, AffinityEvents?.GetCrystal()));
                ret.Add((HeadParts != null ? HeadParts.OnOverall : DefaultOn, HeadParts?.GetCrystal()));
                ret.Add((Races != null ? Races.OnOverall : DefaultOn, Races?.GetCrystal()));
                ret.Add((AudioOcclusionPrimitives != null ? AudioOcclusionPrimitives.OnOverall : DefaultOn, AudioOcclusionPrimitives?.GetCrystal()));
                ret.Add((Planets != null ? Planets.OnOverall : DefaultOn, Planets?.GetCrystal()));
                ret.Add((SurfacePatternStyles != null ? SurfacePatternStyles.OnOverall : DefaultOn, SurfacePatternStyles?.GetCrystal()));
                ret.Add((Debris != null ? Debris.OnOverall : DefaultOn, Debris?.GetCrystal()));
                ret.Add((ActorValueModulations != null ? ActorValueModulations.OnOverall : DefaultOn, ActorValueModulations?.GetCrystal()));
                ret.Add((BiomeSwaps != null ? BiomeSwaps.OnOverall : DefaultOn, BiomeSwaps?.GetCrystal()));
                ret.Add((BoneModifiers != null ? BoneModifiers.OnOverall : DefaultOn, BoneModifiers?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override GameRelease GameRelease => GameRelease.Starfield;
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        IGroup<T>? IMod.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroup? IMod.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param, IFileSystem? fileSystem) => this.WriteToBinary(path, importMask: null, param: param, fileSystem: fileSystem);
        void IModGetter.WriteToBinaryParallel(FilePath path, BinaryWriteParameters? param, IFileSystem? fileSystem, ParallelWriteParameters? parallelWriteParams) => this.WriteToBinaryParallel(path, param, fileSystem: fileSystem, parallelParam: parallelWriteParams);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(Stream stream, BinaryWriteParameters? param, ParallelWriteParameters? parallelWriteParams) => this.WriteToBinaryParallel(stream, param, parallelParam: parallelWriteParams);
        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => StarfieldModMixIn.GetEqualsMask(this, (IStarfieldModGetter)rhs, include);
        public override bool CanUseLocalization => true;
        public override bool UsingLocalization
        {
            get => this.ModHeader.Flags.HasFlag(StarfieldModHeader.HeaderFlag.Localized);
            set => this.ModHeader.Flags = this.ModHeader.Flags.SetFlag(StarfieldModHeader.HeaderFlag.Localized, value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<MasterReference> IMod.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IMod.NextFormID
        {
            get => this.ModHeader.Stats.NextFormID;
            set => this.ModHeader.Stats.NextFormID = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IModGetter.NextFormID => this.ModHeader.Stats.NextFormID;
        public StarfieldMod(ModKey modKey)
            : base(modKey)
        {
            this.ModHeader.Stats.NextFormID = GetDefaultInitialNextFormID();
            _GameSettings_Object = new StarfieldGroup<GameSetting>(this);
            _Keywords_Object = new StarfieldGroup<Keyword>(this);
            _FFKW_Object = new StarfieldGroup<FFKWRecord>(this);
            _LocationReferenceTypes_Object = new StarfieldGroup<LocationReferenceType>(this);
            _Actions_Object = new StarfieldGroup<ActionRecord>(this);
            _Transforms_Object = new StarfieldGroup<Transform>(this);
            _TextureSets_Object = new StarfieldGroup<TextureSet>(this);
            _Globals_Object = new StarfieldGroup<Global>(this);
            _DamageTypes_Object = new StarfieldGroup<DamageType>(this);
            _Classes_Object = new StarfieldGroup<Class>(this);
            _Factions_Object = new StarfieldGroup<Faction>(this);
            _AffinityEvents_Object = new StarfieldGroup<AffinityEvent>(this);
            _HeadParts_Object = new StarfieldGroup<HeadPart>(this);
            _Races_Object = new StarfieldGroup<Race>(this);
            _AudioOcclusionPrimitives_Object = new StarfieldGroup<AudioOcclusionPrimitive>(this);
            _Planets_Object = new StarfieldGroup<Planet>(this);
            _SurfacePatternStyles_Object = new StarfieldGroup<SurfacePatternStyle>(this);
            _Debris_Object = new StarfieldGroup<Debris>(this);
            _ActorValueModulations_Object = new StarfieldGroup<ActorValueModulation>(this);
            _BiomeSwaps_Object = new StarfieldGroup<BiomeSwap>(this);
            _BoneModifiers_Object = new StarfieldGroup<BoneModifier>(this);
            CustomCtor();
        }
        public void AddRecords(
            StarfieldMod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(rhsMod.Keywords.RecordCache.Items);
            }
            if (mask?.FFKW ?? true)
            {
                this.FFKW.RecordCache.Set(rhsMod.FFKW.RecordCache.Items);
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(rhsMod.LocationReferenceTypes.RecordCache.Items);
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(rhsMod.Actions.RecordCache.Items);
            }
            if (mask?.Transforms ?? true)
            {
                this.Transforms.RecordCache.Set(rhsMod.Transforms.RecordCache.Items);
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(rhsMod.TextureSets.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
            if (mask?.DamageTypes ?? true)
            {
                this.DamageTypes.RecordCache.Set(rhsMod.DamageTypes.RecordCache.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(rhsMod.Classes.RecordCache.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(rhsMod.Factions.RecordCache.Items);
            }
            if (mask?.AffinityEvents ?? true)
            {
                this.AffinityEvents.RecordCache.Set(rhsMod.AffinityEvents.RecordCache.Items);
            }
            if (mask?.HeadParts ?? true)
            {
                this.HeadParts.RecordCache.Set(rhsMod.HeadParts.RecordCache.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(rhsMod.Races.RecordCache.Items);
            }
            if (mask?.AudioOcclusionPrimitives ?? true)
            {
                this.AudioOcclusionPrimitives.RecordCache.Set(rhsMod.AudioOcclusionPrimitives.RecordCache.Items);
            }
            if (mask?.Planets ?? true)
            {
                this.Planets.RecordCache.Set(rhsMod.Planets.RecordCache.Items);
            }
            if (mask?.SurfacePatternStyles ?? true)
            {
                this.SurfacePatternStyles.RecordCache.Set(rhsMod.SurfacePatternStyles.RecordCache.Items);
            }
            if (mask?.Debris ?? true)
            {
                this.Debris.RecordCache.Set(rhsMod.Debris.RecordCache.Items);
            }
            if (mask?.ActorValueModulations ?? true)
            {
                this.ActorValueModulations.RecordCache.Set(rhsMod.ActorValueModulations.RecordCache.Items);
            }
            if (mask?.BiomeSwaps ?? true)
            {
                this.BiomeSwaps.RecordCache.Set(rhsMod.BiomeSwaps.RecordCache.Items);
            }
            if (mask?.BoneModifiers ?? true)
            {
                this.BoneModifiers.RecordCache.Set(rhsMod.BoneModifiers.RecordCache.Items);
            }
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = GetRecordCount();
        }

        public uint GetRecordCount()
        {
            uint count = (uint)this.EnumerateMajorRecords().Count();
            count += GameSettings.RecordCache.Count > 0 ? 1 : default(uint);
            count += Keywords.RecordCache.Count > 0 ? 1 : default(uint);
            count += FFKW.RecordCache.Count > 0 ? 1 : default(uint);
            count += LocationReferenceTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Actions.RecordCache.Count > 0 ? 1 : default(uint);
            count += Transforms.RecordCache.Count > 0 ? 1 : default(uint);
            count += TextureSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += Globals.RecordCache.Count > 0 ? 1 : default(uint);
            count += DamageTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Classes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Factions.RecordCache.Count > 0 ? 1 : default(uint);
            count += AffinityEvents.RecordCache.Count > 0 ? 1 : default(uint);
            count += HeadParts.RecordCache.Count > 0 ? 1 : default(uint);
            count += Races.RecordCache.Count > 0 ? 1 : default(uint);
            count += AudioOcclusionPrimitives.RecordCache.Count > 0 ? 1 : default(uint);
            count += Planets.RecordCache.Count > 0 ? 1 : default(uint);
            count += SurfacePatternStyles.RecordCache.Count > 0 ? 1 : default(uint);
            count += Debris.RecordCache.Count > 0 ? 1 : default(uint);
            count += ActorValueModulations.RecordCache.Count > 0 ? 1 : default(uint);
            count += BiomeSwaps.RecordCache.Count > 0 ? 1 : default(uint);
            count += BoneModifiers.RecordCache.Count > 0 ? 1 : default(uint);
            GetCustomRecordCount((customCount) => count += customCount);
            return count;
        }

        partial void GetCustomRecordCount(Action<uint> setter);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StarfieldModCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => StarfieldModSetterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => StarfieldModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks() => StarfieldModSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => StarfieldModSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => StarfieldModSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        #region Binary Create
        public static StarfieldMod CreateFromBinary(
            ModPath path,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true,
            IFileSystem? fileSystem = null)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem));
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = path.ModKey;
                    frame.MetaData.Absorb(stringsParam);
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(GameRelease.Starfield, path.ModKey, Path.GetDirectoryName(path.Path)!, stringsParam);
                    }
                    return CreateFromBinary(
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, path.ModKey);
            }
        }

        public static StarfieldMod CreateFromBinary(
            ModPath path,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true,
            IFileSystem? fileSystem = null)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem));
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = path.ModKey;
                    frame.MetaData.Absorb(stringsParam);
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(GameRelease.Starfield, path.ModKey, Path.GetDirectoryName(path.Path)!, stringsParam);
                    }
                    return CreateFromBinary(
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, path.ModKey);
            }
        }

        public static StarfieldMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            RecordTypeInfoCacheReader infoCache,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(stream, modKey, GameRelease.Starfield))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = modKey;
                    return CreateFromBinary(
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, modKey);
            }
        }

        public static StarfieldMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            RecordTypeInfoCacheReader infoCache,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(stream, modKey, GameRelease.Starfield))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = modKey;
                    return CreateFromBinary(
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, modKey);
            }
        }

        #endregion

        public static IStarfieldModDisposableGetter CreateFromBinaryOverlay(
            ModPath path,
            StringsReadParameters? stringsParam = null,
            IFileSystem? fileSystem = null)
        {
            return StarfieldModBinaryOverlay.StarfieldModFactory(
                path: path,
                stringsParam: stringsParam,
                fileSystem: fileSystem);
        }

        public static IStarfieldModDisposableGetter CreateFromBinaryOverlay(
            Stream stream,
            ModKey modKey)
        {
            return StarfieldModBinaryOverlay.StarfieldModFactory(
                stream: new MutagenBinaryReadStream(stream, modKey, GameRelease.Starfield),
                modKey: modKey,
                shouldDispose: false);
        }

        public static StarfieldMod CreateFromBinary(
            MutagenFrame frame,
            GroupMask? importMask = null)
        {
            try
            {
                var ret = new StarfieldMod(modKey: frame.MetaData.ModKey);
                ((StarfieldModSetterCommon)((IStarfieldModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                    item: ret,
                    frame: frame,
                    importMask: importMask);
                return ret;
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, frame.MetaData.ModKey);
            }
        }

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static StarfieldMod GetNew()
        {
            return new StarfieldMod();
        }

    }
    #endregion

    #region Interface
    public partial interface IStarfieldMod :
        IAssetLinkContainer,
        IContextMod<IStarfieldMod, IStarfieldModGetter>,
        IFormLinkContainer,
        ILoquiObjectSetter<IStarfieldMod>,
        IMajorRecordEnumerable,
        IMod,
        IStarfieldModGetter
    {
        new StarfieldModHeader ModHeader { get; }
        new StarfieldGroup<GameSetting> GameSettings { get; }
        new StarfieldGroup<Keyword> Keywords { get; }
        new StarfieldGroup<FFKWRecord> FFKW { get; }
        new StarfieldGroup<LocationReferenceType> LocationReferenceTypes { get; }
        new StarfieldGroup<ActionRecord> Actions { get; }
        new StarfieldGroup<Transform> Transforms { get; }
        new StarfieldGroup<TextureSet> TextureSets { get; }
        new StarfieldGroup<Global> Globals { get; }
        new StarfieldGroup<DamageType> DamageTypes { get; }
        new StarfieldGroup<Class> Classes { get; }
        new StarfieldGroup<Faction> Factions { get; }
        new StarfieldGroup<AffinityEvent> AffinityEvents { get; }
        new StarfieldGroup<HeadPart> HeadParts { get; }
        new StarfieldGroup<Race> Races { get; }
        new StarfieldGroup<AudioOcclusionPrimitive> AudioOcclusionPrimitives { get; }
        new StarfieldGroup<Planet> Planets { get; }
        new StarfieldGroup<SurfacePatternStyle> SurfacePatternStyles { get; }
        new StarfieldGroup<Debris> Debris { get; }
        new StarfieldGroup<ActorValueModulation> ActorValueModulations { get; }
        new StarfieldGroup<BiomeSwap> BiomeSwaps { get; }
        new StarfieldGroup<BoneModifier> BoneModifiers { get; }
    }

    public partial interface IStarfieldModGetter :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IContextGetterMod<IStarfieldMod, IStarfieldModGetter>,
        IFormLinkContainerGetter,
        ILoquiObject<IStarfieldModGetter>,
        IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>,
        IMajorRecordGetterEnumerable,
        IModGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => StarfieldMod_Registration.Instance;
        IStarfieldModHeaderGetter ModHeader { get; }
        IStarfieldGroupGetter<IGameSettingGetter> GameSettings { get; }
        IStarfieldGroupGetter<IKeywordGetter> Keywords { get; }
        IStarfieldGroupGetter<IFFKWRecordGetter> FFKW { get; }
        IStarfieldGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes { get; }
        IStarfieldGroupGetter<IActionRecordGetter> Actions { get; }
        IStarfieldGroupGetter<ITransformGetter> Transforms { get; }
        IStarfieldGroupGetter<ITextureSetGetter> TextureSets { get; }
        IStarfieldGroupGetter<IGlobalGetter> Globals { get; }
        IStarfieldGroupGetter<IDamageTypeGetter> DamageTypes { get; }
        IStarfieldGroupGetter<IClassGetter> Classes { get; }
        IStarfieldGroupGetter<IFactionGetter> Factions { get; }
        IStarfieldGroupGetter<IAffinityEventGetter> AffinityEvents { get; }
        IStarfieldGroupGetter<IHeadPartGetter> HeadParts { get; }
        IStarfieldGroupGetter<IRaceGetter> Races { get; }
        IStarfieldGroupGetter<IAudioOcclusionPrimitiveGetter> AudioOcclusionPrimitives { get; }
        IStarfieldGroupGetter<IPlanetGetter> Planets { get; }
        IStarfieldGroupGetter<ISurfacePatternStyleGetter> SurfacePatternStyles { get; }
        IStarfieldGroupGetter<IDebrisGetter> Debris { get; }
        IStarfieldGroupGetter<IActorValueModulationGetter> ActorValueModulations { get; }
        IStarfieldGroupGetter<IBiomeSwapGetter> BiomeSwaps { get; }
        IStarfieldGroupGetter<IBoneModifierGetter> BoneModifiers { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StarfieldModMixIn
    {
        public static void Clear(this IStarfieldMod item)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StarfieldMod.Mask<bool> GetEqualsMask(
            this IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStarfieldModGetter item,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStarfieldModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            StarfieldMod.TranslationMask? equalsMask = null)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs)
        {
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs,
            out StarfieldMod.ErrorMask errorMask,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StarfieldMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StarfieldMod DeepCopy(
            this IStarfieldModGetter item,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            return ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StarfieldMod DeepCopy(
            this IStarfieldModGetter item,
            out StarfieldMod.ErrorMask errorMask,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            return ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StarfieldMod DeepCopy(
            this IStarfieldModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IGroupGetter<T>? TryGetTopLevelGroup<T>(this IStarfieldModGetter obj)
            where T : IMajorRecordGetter
        {
            return (IGroupGetter<T>?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroupGetter? TryGetTopLevelGroup(
            this IStarfieldModGetter obj,
            Type type)
        {
            return (IGroupGetter?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static IGroup<T>? TryGetTopLevelGroup<T>(this IStarfieldMod obj)
            where T : IMajorRecord
        {
            return (IGroup<T>?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroup? TryGetTopLevelGroup(
            this IStarfieldMod obj,
            Type type)
        {
            return (IGroup?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static void WriteToBinaryParallel(
            this IStarfieldModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            ParallelWriteParameters? parallelParam = null)
        {
            StarfieldModCommon.WriteParallel(
                item: item,
                stream: stream,
                parallelParam: parallelParam ?? ParallelWriteParameters.Default,
                param: param ?? BinaryWriteParameters.Default,
                modKey: item.ModKey);
        }

        public static void WriteToBinaryParallel(
            this IStarfieldModGetter item,
            string path,
            BinaryWriteParameters? param = null,
            ParallelWriteParameters? parallelParam = null,
            IFileSystem? fileSystem = null)
        {
            param ??= BinaryWriteParameters.Default;
            parallelParam ??= ParallelWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            param.StringsWriter ??= Enums.HasFlag((int)item.ModHeader.Flags, (int)ModHeaderCommonFlag.Localized) ? new StringsWriter(GameRelease.Starfield, modKey, Path.Combine(Path.GetDirectoryName(path)!, "Strings"), MutagenEncodingProvider.Instance) : null;
            bool disposeStrings = param.StringsWriter != null;
            using (var stream = fileSystem.GetOrDefault().FileStream.Create(path, FileMode.Create, FileAccess.Write))
            {
                StarfieldModCommon.WriteParallel(
                    item: item,
                    stream: stream,
                    parallelParam: parallelParam,
                    param: param,
                    modKey: modKey);
            }
            if (disposeStrings)
            {
                param.StringsWriter?.Dispose();
            }
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this IStarfieldModGetter obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IStarfieldModGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this IStarfieldModGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this IStarfieldMod obj)
        {
            return ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IStarfieldMod obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this IStarfieldMod obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            IEnumerable<FormKey> keys)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            HashSet<FormKey> keys)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, TSetter, TGetter>> EnumerateMajorRecordContexts<TSetter, TGetter>(
            this IStarfieldModGetter obj,
            ILinkCache linkCache,
            bool throwIfUnknown = true)
            where TSetter : class, IMajorRecordQueryable, TGetter
            where TGetter : class, IMajorRecordQueryableGetter
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: typeof(TGetter),
                throwIfUnknown: throwIfUnknown)
                .Select(m => m.AsType<IStarfieldMod, IStarfieldModGetter, IMajorRecordQueryable, IMajorRecordQueryableGetter, TSetter, TGetter>())
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IMajorRecordGetter>> EnumerateMajorRecordContexts(this IStarfieldModGetter obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: null!);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            this IStarfieldModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStarfieldMod item,
            MutagenFrame frame,
            GroupMask? importMask = null)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                importMask: importMask);
        }

        public static void CopyInFromBinary(
            this IStarfieldMod item,
            ModPath path,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true,
            IFileSystem? fileSystem = null)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem));
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = path.ModKey;
                    frame.MetaData.Absorb(stringsParam);
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(GameRelease.Starfield, path.ModKey, Path.GetDirectoryName(path.Path)!, stringsParam);
                    }
                    CopyInFromBinary(
                        item: item,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, path.ModKey);
            }
        }

        public static void CopyInFromBinary(
            this IStarfieldMod item,
            Stream stream,
            ModKey modKey,
            RecordTypeInfoCacheReader infoCache,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(stream, modKey, GameRelease.Starfield))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = modKey;
                    CopyInFromBinary(
                        item: item,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, modKey);
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum StarfieldMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Keywords = 2,
        FFKW = 3,
        LocationReferenceTypes = 4,
        Actions = 5,
        Transforms = 6,
        TextureSets = 7,
        Globals = 8,
        DamageTypes = 9,
        Classes = 10,
        Factions = 11,
        AffinityEvents = 12,
        HeadParts = 13,
        Races = 14,
        AudioOcclusionPrimitives = 15,
        Planets = 16,
        SurfacePatternStyles = 17,
        Debris = 18,
        ActorValueModulations = 19,
        BiomeSwaps = 20,
        BoneModifiers = 21,
    }
    #endregion

    #region Registration
    internal partial class StarfieldMod_Registration : ILoquiRegistration
    {
        public static readonly StarfieldMod_Registration Instance = new StarfieldMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 22;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(StarfieldMod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StarfieldMod.ErrorMask);

        public static readonly Type ClassType = typeof(StarfieldMod);

        public static readonly Type GetterType = typeof(IStarfieldModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStarfieldMod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.StarfieldMod";

        public const string Name = "StarfieldMod";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static readonly Type BinaryWriteTranslation = typeof(StarfieldModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StarfieldModSetterCommon
    {
        public static readonly StarfieldModSetterCommon Instance = new StarfieldModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStarfieldMod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Keywords.Clear();
            item.FFKW.Clear();
            item.LocationReferenceTypes.Clear();
            item.Actions.Clear();
            item.Transforms.Clear();
            item.TextureSets.Clear();
            item.Globals.Clear();
            item.DamageTypes.Clear();
            item.Classes.Clear();
            item.Factions.Clear();
            item.AffinityEvents.Clear();
            item.HeadParts.Clear();
            item.Races.Clear();
            item.AudioOcclusionPrimitives.Clear();
            item.Planets.Clear();
            item.SurfacePatternStyles.Clear();
            item.Debris.Clear();
            item.ActorValueModulations.Clear();
            item.BiomeSwaps.Clear();
            item.BoneModifiers.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IStarfieldMod obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ModHeader.RemapLinks(mapping);
            obj.Keywords.RemapLinks(mapping);
            obj.LocationReferenceTypes.RemapLinks(mapping);
            obj.Globals.RemapLinks(mapping);
            obj.DamageTypes.RemapLinks(mapping);
            obj.Classes.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.AffinityEvents.RemapLinks(mapping);
            obj.HeadParts.RemapLinks(mapping);
            obj.Races.RemapLinks(mapping);
            obj.Planets.RemapLinks(mapping);
            obj.ActorValueModulations.RemapLinks(mapping);
            obj.BoneModifiers.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(IStarfieldMod obj)
        {
            foreach (var item in StarfieldModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IStarfieldMod obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IStarfieldMod obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in StarfieldModCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IStarfieldMod obj,
            HashSet<FormKey> keys)
        {
            obj.GameSettings.Remove(keys);
            obj.Keywords.Remove(keys);
            obj.FFKW.Remove(keys);
            obj.LocationReferenceTypes.Remove(keys);
            obj.Actions.Remove(keys);
            obj.Transforms.Remove(keys);
            obj.TextureSets.Remove(keys);
            obj.Globals.Remove(keys);
            obj.DamageTypes.Remove(keys);
            obj.Classes.Remove(keys);
            obj.Factions.Remove(keys);
            obj.AffinityEvents.Remove(keys);
            obj.HeadParts.Remove(keys);
            obj.Races.Remove(keys);
            obj.AudioOcclusionPrimitives.Remove(keys);
            obj.Planets.Remove(keys);
            obj.SurfacePatternStyles.Remove(keys);
            obj.Debris.Remove(keys);
            obj.ActorValueModulations.Remove(keys);
            obj.BiomeSwaps.Remove(keys);
            obj.BoneModifiers.Remove(keys);
        }
        
        public void Remove(
            IStarfieldMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    if (!StarfieldMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                case "GameSettingInt":
                case "IGameSettingIntGetter":
                case "IGameSettingInt":
                case "IGameSettingIntInternal":
                case "GameSettingFloat":
                case "IGameSettingFloatGetter":
                case "IGameSettingFloat":
                case "IGameSettingFloatInternal":
                case "GameSettingString":
                case "IGameSettingStringGetter":
                case "IGameSettingString":
                case "IGameSettingStringInternal":
                case "GameSettingBool":
                case "IGameSettingBoolGetter":
                case "IGameSettingBool":
                case "IGameSettingBoolInternal":
                case "GameSettingUInt":
                case "IGameSettingUIntGetter":
                case "IGameSettingUInt":
                case "IGameSettingUIntInternal":
                    obj.GameSettings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    obj.Keywords.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FFKWRecord":
                case "IFFKWRecordGetter":
                case "IFFKWRecord":
                case "IFFKWRecordInternal":
                    obj.FFKW.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    obj.LocationReferenceTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    obj.Actions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    obj.Transforms.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    obj.TextureSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    obj.Globals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DamageType":
                case "IDamageTypeGetter":
                case "IDamageType":
                case "IDamageTypeInternal":
                    obj.DamageTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    obj.Classes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    obj.Factions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AffinityEvent":
                case "IAffinityEventGetter":
                case "IAffinityEvent":
                case "IAffinityEventInternal":
                    obj.AffinityEvents.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    obj.HeadParts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    obj.Races.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveGetter":
                case "IAudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveInternal":
                    obj.AudioOcclusionPrimitives.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Planet":
                case "IPlanetGetter":
                case "IPlanet":
                case "IPlanetInternal":
                    obj.Planets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SurfacePatternStyle":
                case "ISurfacePatternStyleGetter":
                case "ISurfacePatternStyle":
                case "ISurfacePatternStyleInternal":
                    obj.SurfacePatternStyles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    obj.Debris.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActorValueModulation":
                case "IActorValueModulationGetter":
                case "IActorValueModulation":
                case "IActorValueModulationInternal":
                    obj.ActorValueModulations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BiomeSwap":
                case "IBiomeSwapGetter":
                case "IBiomeSwap":
                case "IBiomeSwapInternal":
                    obj.BiomeSwaps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BoneModifier":
                case "IBoneModifierGetter":
                case "IBoneModifier":
                case "IBoneModifierInternal":
                    obj.BoneModifiers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IIdleRelation":
                case "IIdleRelationGetter":
                    Remove(obj, keys, typeof(IActionRecordGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IOwner":
                case "IOwnerGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IObjectId":
                case "IObjectIdGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IRelatable":
                case "IRelatableGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IRaceGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IAliasVoiceType":
                case "IAliasVoiceTypeGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                    Remove(obj, keys, typeof(IKeywordGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILocationRecord":
                case "ILocationRecordGetter":
                    Remove(obj, keys, typeof(ILocationReferenceTypeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlaceableObject":
                case "IPlaceableObjectGetter":
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IReferenceableObject":
                case "IReferenceableObjectGetter":
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IExplodeSpawn":
                case "IExplodeSpawnGetter":
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IStarfieldMod obj)
        {
            if (obj.Keywords is IAssetLinkContainer KeywordslinkCont)
            {
                foreach (var item in KeywordslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.LocationReferenceTypes is IAssetLinkContainer LocationReferenceTypeslinkCont)
            {
                foreach (var item in LocationReferenceTypeslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Globals is IAssetLinkContainer GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Factions is IAssetLinkContainer FactionslinkCont)
            {
                foreach (var item in FactionslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.HeadParts is IAssetLinkContainer HeadPartslinkCont)
            {
                foreach (var item in HeadPartslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Races.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Planets is IAssetLinkContainer PlanetslinkCont)
            {
                foreach (var item in PlanetslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Debris.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.ActorValueModulations is IAssetLinkContainer ActorValueModulationslinkCont)
            {
                foreach (var item in ActorValueModulationslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.BoneModifiers is IAssetLinkContainer BoneModifierslinkCont)
            {
                foreach (var item in BoneModifierslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        private static partial void RemapInferredAssetLinks(
            IStarfieldMod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            AssetLinkQuery queryCategories);
        
        public void RemapAssetLinks(
            IStarfieldMod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            RemapInferredAssetLinks(obj, mapping, queryCategories);
            obj.Keywords.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LocationReferenceTypes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Globals.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Factions.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.HeadParts.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Races.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Planets.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Debris.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ActorValueModulations.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.BoneModifiers.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStarfieldMod item,
            MutagenFrame frame,
            GroupMask? importMask = null)
        {
            PluginUtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                fillTyped: StarfieldModBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class StarfieldModCommon
    {
        public static readonly StarfieldModCommon Instance = new StarfieldModCommon();

        public StarfieldMod.Mask<bool> GetEqualsMask(
            IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StarfieldMod.Mask<bool>(false);
            ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            StarfieldMod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Keywords = MaskItemExt.Factory(item.Keywords.GetEqualsMask(rhs.Keywords, include), include);
            ret.FFKW = MaskItemExt.Factory(item.FFKW.GetEqualsMask(rhs.FFKW, include), include);
            ret.LocationReferenceTypes = MaskItemExt.Factory(item.LocationReferenceTypes.GetEqualsMask(rhs.LocationReferenceTypes, include), include);
            ret.Actions = MaskItemExt.Factory(item.Actions.GetEqualsMask(rhs.Actions, include), include);
            ret.Transforms = MaskItemExt.Factory(item.Transforms.GetEqualsMask(rhs.Transforms, include), include);
            ret.TextureSets = MaskItemExt.Factory(item.TextureSets.GetEqualsMask(rhs.TextureSets, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.DamageTypes = MaskItemExt.Factory(item.DamageTypes.GetEqualsMask(rhs.DamageTypes, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
            ret.AffinityEvents = MaskItemExt.Factory(item.AffinityEvents.GetEqualsMask(rhs.AffinityEvents, include), include);
            ret.HeadParts = MaskItemExt.Factory(item.HeadParts.GetEqualsMask(rhs.HeadParts, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.AudioOcclusionPrimitives = MaskItemExt.Factory(item.AudioOcclusionPrimitives.GetEqualsMask(rhs.AudioOcclusionPrimitives, include), include);
            ret.Planets = MaskItemExt.Factory(item.Planets.GetEqualsMask(rhs.Planets, include), include);
            ret.SurfacePatternStyles = MaskItemExt.Factory(item.SurfacePatternStyles.GetEqualsMask(rhs.SurfacePatternStyles, include), include);
            ret.Debris = MaskItemExt.Factory(item.Debris.GetEqualsMask(rhs.Debris, include), include);
            ret.ActorValueModulations = MaskItemExt.Factory(item.ActorValueModulations.GetEqualsMask(rhs.ActorValueModulations, include), include);
            ret.BiomeSwaps = MaskItemExt.Factory(item.BiomeSwaps.GetEqualsMask(rhs.BiomeSwaps, include), include);
            ret.BoneModifiers = MaskItemExt.Factory(item.BoneModifiers.GetEqualsMask(rhs.BoneModifiers, include), include);
        }
        
        public string Print(
            IStarfieldModGetter item,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStarfieldModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"StarfieldMod =>");
            }
            else
            {
                sb.AppendLine($"{name} (StarfieldMod) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStarfieldModGetter item,
            StructuredStringBuilder sb,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.Print(sb, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.Print(sb, "GameSettings");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                item.Keywords?.Print(sb, "Keywords");
            }
            if (printMask?.FFKW?.Overall ?? true)
            {
                item.FFKW?.Print(sb, "FFKW");
            }
            if (printMask?.LocationReferenceTypes?.Overall ?? true)
            {
                item.LocationReferenceTypes?.Print(sb, "LocationReferenceTypes");
            }
            if (printMask?.Actions?.Overall ?? true)
            {
                item.Actions?.Print(sb, "Actions");
            }
            if (printMask?.Transforms?.Overall ?? true)
            {
                item.Transforms?.Print(sb, "Transforms");
            }
            if (printMask?.TextureSets?.Overall ?? true)
            {
                item.TextureSets?.Print(sb, "TextureSets");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.Print(sb, "Globals");
            }
            if (printMask?.DamageTypes?.Overall ?? true)
            {
                item.DamageTypes?.Print(sb, "DamageTypes");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.Print(sb, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.Print(sb, "Factions");
            }
            if (printMask?.AffinityEvents?.Overall ?? true)
            {
                item.AffinityEvents?.Print(sb, "AffinityEvents");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                item.HeadParts?.Print(sb, "HeadParts");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.Print(sb, "Races");
            }
            if (printMask?.AudioOcclusionPrimitives?.Overall ?? true)
            {
                item.AudioOcclusionPrimitives?.Print(sb, "AudioOcclusionPrimitives");
            }
            if (printMask?.Planets?.Overall ?? true)
            {
                item.Planets?.Print(sb, "Planets");
            }
            if (printMask?.SurfacePatternStyles?.Overall ?? true)
            {
                item.SurfacePatternStyles?.Print(sb, "SurfacePatternStyles");
            }
            if (printMask?.Debris?.Overall ?? true)
            {
                item.Debris?.Print(sb, "Debris");
            }
            if (printMask?.ActorValueModulations?.Overall ?? true)
            {
                item.ActorValueModulations?.Print(sb, "ActorValueModulations");
            }
            if (printMask?.BiomeSwaps?.Overall ?? true)
            {
                item.BiomeSwaps?.Print(sb, "BiomeSwaps");
            }
            if (printMask?.BoneModifiers?.Overall ?? true)
            {
                item.BoneModifiers?.Print(sb, "BoneModifiers");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStarfieldModGetter? lhs,
            IStarfieldModGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ModHeader) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ModHeader, rhs.ModHeader, out var lhsModHeader, out var rhsModHeader, out var isModHeaderEqual))
                {
                    if (!((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)lhsModHeader).CommonInstance()!).Equals(lhsModHeader, rhsModHeader, equalsMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ModHeader))) return false;
                }
                else if (!isModHeaderEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GameSettings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GameSettings, rhs.GameSettings, out var lhsGameSettings, out var rhsGameSettings, out var isGameSettingsEqual))
                {
                    if (!object.Equals(lhsGameSettings, rhsGameSettings)) return false;
                }
                else if (!isGameSettingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Keywords) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Keywords, rhs.Keywords, out var lhsKeywords, out var rhsKeywords, out var isKeywordsEqual))
                {
                    if (!object.Equals(lhsKeywords, rhsKeywords)) return false;
                }
                else if (!isKeywordsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FFKW) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FFKW, rhs.FFKW, out var lhsFFKW, out var rhsFFKW, out var isFFKWEqual))
                {
                    if (!object.Equals(lhsFFKW, rhsFFKW)) return false;
                }
                else if (!isFFKWEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LocationReferenceTypes, rhs.LocationReferenceTypes, out var lhsLocationReferenceTypes, out var rhsLocationReferenceTypes, out var isLocationReferenceTypesEqual))
                {
                    if (!object.Equals(lhsLocationReferenceTypes, rhsLocationReferenceTypes)) return false;
                }
                else if (!isLocationReferenceTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Actions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Actions, rhs.Actions, out var lhsActions, out var rhsActions, out var isActionsEqual))
                {
                    if (!object.Equals(lhsActions, rhsActions)) return false;
                }
                else if (!isActionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Transforms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Transforms, rhs.Transforms, out var lhsTransforms, out var rhsTransforms, out var isTransformsEqual))
                {
                    if (!object.Equals(lhsTransforms, rhsTransforms)) return false;
                }
                else if (!isTransformsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.TextureSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TextureSets, rhs.TextureSets, out var lhsTextureSets, out var rhsTextureSets, out var isTextureSetsEqual))
                {
                    if (!object.Equals(lhsTextureSets, rhsTextureSets)) return false;
                }
                else if (!isTextureSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Globals) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Globals, rhs.Globals, out var lhsGlobals, out var rhsGlobals, out var isGlobalsEqual))
                {
                    if (!object.Equals(lhsGlobals, rhsGlobals)) return false;
                }
                else if (!isGlobalsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.DamageTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DamageTypes, rhs.DamageTypes, out var lhsDamageTypes, out var rhsDamageTypes, out var isDamageTypesEqual))
                {
                    if (!object.Equals(lhsDamageTypes, rhsDamageTypes)) return false;
                }
                else if (!isDamageTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Classes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Classes, rhs.Classes, out var lhsClasses, out var rhsClasses, out var isClassesEqual))
                {
                    if (!object.Equals(lhsClasses, rhsClasses)) return false;
                }
                else if (!isClassesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Factions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Factions, rhs.Factions, out var lhsFactions, out var rhsFactions, out var isFactionsEqual))
                {
                    if (!object.Equals(lhsFactions, rhsFactions)) return false;
                }
                else if (!isFactionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AffinityEvents) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AffinityEvents, rhs.AffinityEvents, out var lhsAffinityEvents, out var rhsAffinityEvents, out var isAffinityEventsEqual))
                {
                    if (!object.Equals(lhsAffinityEvents, rhsAffinityEvents)) return false;
                }
                else if (!isAffinityEventsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.HeadParts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HeadParts, rhs.HeadParts, out var lhsHeadParts, out var rhsHeadParts, out var isHeadPartsEqual))
                {
                    if (!object.Equals(lhsHeadParts, rhsHeadParts)) return false;
                }
                else if (!isHeadPartsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Races) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Races, rhs.Races, out var lhsRaces, out var rhsRaces, out var isRacesEqual))
                {
                    if (!object.Equals(lhsRaces, rhsRaces)) return false;
                }
                else if (!isRacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AudioOcclusionPrimitives, rhs.AudioOcclusionPrimitives, out var lhsAudioOcclusionPrimitives, out var rhsAudioOcclusionPrimitives, out var isAudioOcclusionPrimitivesEqual))
                {
                    if (!object.Equals(lhsAudioOcclusionPrimitives, rhsAudioOcclusionPrimitives)) return false;
                }
                else if (!isAudioOcclusionPrimitivesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Planets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Planets, rhs.Planets, out var lhsPlanets, out var rhsPlanets, out var isPlanetsEqual))
                {
                    if (!object.Equals(lhsPlanets, rhsPlanets)) return false;
                }
                else if (!isPlanetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfacePatternStyles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SurfacePatternStyles, rhs.SurfacePatternStyles, out var lhsSurfacePatternStyles, out var rhsSurfacePatternStyles, out var isSurfacePatternStylesEqual))
                {
                    if (!object.Equals(lhsSurfacePatternStyles, rhsSurfacePatternStyles)) return false;
                }
                else if (!isSurfacePatternStylesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Debris) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Debris, rhs.Debris, out var lhsDebris, out var rhsDebris, out var isDebrisEqual))
                {
                    if (!object.Equals(lhsDebris, rhsDebris)) return false;
                }
                else if (!isDebrisEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ActorValueModulations) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ActorValueModulations, rhs.ActorValueModulations, out var lhsActorValueModulations, out var rhsActorValueModulations, out var isActorValueModulationsEqual))
                {
                    if (!object.Equals(lhsActorValueModulations, rhsActorValueModulations)) return false;
                }
                else if (!isActorValueModulationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BiomeSwaps) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BiomeSwaps, rhs.BiomeSwaps, out var lhsBiomeSwaps, out var rhsBiomeSwaps, out var isBiomeSwapsEqual))
                {
                    if (!object.Equals(lhsBiomeSwaps, rhsBiomeSwaps)) return false;
                }
                else if (!isBiomeSwapsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BoneModifiers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BoneModifiers, rhs.BoneModifiers, out var lhsBoneModifiers, out var rhsBoneModifiers, out var isBoneModifiersEqual))
                {
                    if (!object.Equals(lhsBoneModifiers, rhsBoneModifiers)) return false;
                }
                else if (!isBoneModifiersEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IStarfieldModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.Keywords);
            hash.Add(item.FFKW);
            hash.Add(item.LocationReferenceTypes);
            hash.Add(item.Actions);
            hash.Add(item.Transforms);
            hash.Add(item.TextureSets);
            hash.Add(item.Globals);
            hash.Add(item.DamageTypes);
            hash.Add(item.Classes);
            hash.Add(item.Factions);
            hash.Add(item.AffinityEvents);
            hash.Add(item.HeadParts);
            hash.Add(item.Races);
            hash.Add(item.AudioOcclusionPrimitives);
            hash.Add(item.Planets);
            hash.Add(item.SurfacePatternStyles);
            hash.Add(item.Debris);
            hash.Add(item.ActorValueModulations);
            hash.Add(item.BiomeSwaps);
            hash.Add(item.BoneModifiers);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return StarfieldMod.GetNew();
        }
        
        #region Mutagen
        public object? GetGroup(
            IStarfieldModGetter obj,
            Type type)
        {
            switch (type.Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    return obj.Keywords;
                case "FFKWRecord":
                case "IFFKWRecordGetter":
                case "IFFKWRecord":
                case "IFFKWRecordInternal":
                    return obj.FFKW;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    return obj.LocationReferenceTypes;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    return obj.Actions;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    return obj.Transforms;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    return obj.TextureSets;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals;
                case "DamageType":
                case "IDamageTypeGetter":
                case "IDamageType":
                case "IDamageTypeInternal":
                    return obj.DamageTypes;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions;
                case "AffinityEvent":
                case "IAffinityEventGetter":
                case "IAffinityEvent":
                case "IAffinityEventInternal":
                    return obj.AffinityEvents;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    return obj.HeadParts;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races;
                case "AudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveGetter":
                case "IAudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveInternal":
                    return obj.AudioOcclusionPrimitives;
                case "Planet":
                case "IPlanetGetter":
                case "IPlanet":
                case "IPlanetInternal":
                    return obj.Planets;
                case "SurfacePatternStyle":
                case "ISurfacePatternStyleGetter":
                case "ISurfacePatternStyle":
                case "ISurfacePatternStyleInternal":
                    return obj.SurfacePatternStyles;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    return obj.Debris;
                case "ActorValueModulation":
                case "IActorValueModulationGetter":
                case "IActorValueModulation":
                case "IActorValueModulationInternal":
                    return obj.ActorValueModulations;
                case "BiomeSwap":
                case "IBiomeSwapGetter":
                case "IBiomeSwap":
                case "IBiomeSwapInternal":
                    return obj.BiomeSwaps;
                case "BoneModifier":
                case "IBoneModifierGetter":
                case "IBoneModifier":
                case "IBoneModifierInternal":
                    return obj.BoneModifiers;
                default:
                    return null;
            }
        }
        
        public static void WriteParallel(
            IStarfieldModGetter item,
            Stream stream,
            BinaryWriteParameters param,
            ParallelWriteParameters parallelParam,
            ModKey modKey)
        {
            var bundle = new WritingBundle(GameConstants.Starfield)
            {
                StringsWriter = param.StringsWriter,
                TargetLanguageOverride = param.TargetLanguageOverride,
                Encodings = param.Encodings ?? GameConstants.Starfield.Encodings,
            };
            var writer = new MutagenWriter(stream, bundle);
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            Stream[] outputStreams = new Stream[21];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, 0, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Keywords, 1, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.FFKW, 2, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.LocationReferenceTypes, 3, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Actions, 4, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Transforms, 5, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.TextureSets, 6, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Globals, 7, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.DamageTypes, 8, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Classes, 9, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Factions, 10, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.AffinityEvents, 11, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.HeadParts, 12, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Races, 13, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.AudioOcclusionPrimitives, 14, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Planets, 15, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.SurfacePatternStyles, 16, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Debris, 17, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.ActorValueModulations, 18, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.BiomeSwaps, 19, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.BoneModifiers, 20, outputStreams, bundle, parallelParam));
            Parallel.Invoke(parallelParam.ParallelOptions, toDo.ToArray());
            PluginUtilityTranslation.CompileStreamsInto(
                outputStreams.NotNull(),
                stream);
        }
        
        public static void WriteGroupParallel<T>(
            IStarfieldGroupGetter<T> group,
            int targetIndex,
            Stream[] streamDepositArray,
            WritingBundle bundle,
            ParallelWriteParameters parallelParam)
            where T : class, IStarfieldMajorRecordGetter, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Cut(parallelParam.CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[bundle.Constants.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), RecordTypes.GRUP.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, bundle.Constants, dispose: false))
            {
                stream.Position += 8;
                StarfieldGroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, parallelParam.ParallelOptions, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, bundle with {}, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            PluginUtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStarfieldModGetter obj)
        {
            foreach (var item in obj.ModHeader.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.LocationReferenceTypes is IFormLinkContainerGetter LocationReferenceTypeslinkCont)
            {
                foreach (var item in LocationReferenceTypeslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Globals is IFormLinkContainerGetter GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.DamageTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AffinityEvents.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Planets.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.ActorValueModulations is IFormLinkContainerGetter ActorValueModulationslinkCont)
            {
                foreach (var item in ActorValueModulationslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.BoneModifiers is IFormLinkContainerGetter BoneModifierslinkCont)
            {
                foreach (var item in BoneModifierslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(IStarfieldModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FFKW.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Actions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Transforms.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TextureSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DamageTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AffinityEvents.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AudioOcclusionPrimitives.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Planets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SurfacePatternStyles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Debris.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ActorValueModulations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BiomeSwaps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BoneModifiers.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IStarfieldModGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IStarfieldModGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                    if (!StarfieldMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in obj.Keywords.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FFKWRecord":
                case "IFFKWRecordGetter":
                case "IFFKWRecord":
                case "IFFKWRecordInternal":
                    foreach (var item in obj.FFKW.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in obj.Actions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    foreach (var item in obj.Transforms.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in obj.TextureSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DamageType":
                case "IDamageTypeGetter":
                case "IDamageType":
                case "IDamageTypeInternal":
                    foreach (var item in obj.DamageTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AffinityEvent":
                case "IAffinityEventGetter":
                case "IAffinityEvent":
                case "IAffinityEventInternal":
                    foreach (var item in obj.AffinityEvents.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in obj.HeadParts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveGetter":
                case "IAudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveInternal":
                    foreach (var item in obj.AudioOcclusionPrimitives.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Planet":
                case "IPlanetGetter":
                case "IPlanet":
                case "IPlanetInternal":
                    foreach (var item in obj.Planets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfacePatternStyle":
                case "ISurfacePatternStyleGetter":
                case "ISurfacePatternStyle":
                case "ISurfacePatternStyleInternal":
                    foreach (var item in obj.SurfacePatternStyles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in obj.Debris.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueModulation":
                case "IActorValueModulationGetter":
                case "IActorValueModulation":
                case "IActorValueModulationInternal":
                    foreach (var item in obj.ActorValueModulations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BiomeSwap":
                case "IBiomeSwapGetter":
                case "IBiomeSwap":
                case "IBiomeSwapInternal":
                    foreach (var item in obj.BiomeSwaps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BoneModifier":
                case "IBoneModifierGetter":
                case "IBoneModifier":
                case "IBoneModifierInternal":
                    foreach (var item in obj.BoneModifiers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Starfield, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IStarfieldModGetter obj,
            ILinkCache linkCache)
        {
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GameSetting, IGameSettingGetter>(
                srcGroup: obj.GameSettings,
                type: typeof(IGameSettingGetter),
                modKey: obj.ModKey,
                group: (m) => m.GameSettings,
                groupGetter: (m) => m.GameSettings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Keyword, IKeywordGetter>(
                srcGroup: obj.Keywords,
                type: typeof(IKeywordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Keywords,
                groupGetter: (m) => m.Keywords))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FFKWRecord, IFFKWRecordGetter>(
                srcGroup: obj.FFKW,
                type: typeof(IFFKWRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.FFKW,
                groupGetter: (m) => m.FFKW))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LocationReferenceType, ILocationReferenceTypeGetter>(
                srcGroup: obj.LocationReferenceTypes,
                type: typeof(ILocationReferenceTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.LocationReferenceTypes,
                groupGetter: (m) => m.LocationReferenceTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ActionRecord, IActionRecordGetter>(
                srcGroup: obj.Actions,
                type: typeof(IActionRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Actions,
                groupGetter: (m) => m.Actions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Transform, ITransformGetter>(
                srcGroup: obj.Transforms,
                type: typeof(ITransformGetter),
                modKey: obj.ModKey,
                group: (m) => m.Transforms,
                groupGetter: (m) => m.Transforms))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, TextureSet, ITextureSetGetter>(
                srcGroup: obj.TextureSets,
                type: typeof(ITextureSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.TextureSets,
                groupGetter: (m) => m.TextureSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Global, IGlobalGetter>(
                srcGroup: obj.Globals,
                type: typeof(IGlobalGetter),
                modKey: obj.ModKey,
                group: (m) => m.Globals,
                groupGetter: (m) => m.Globals))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, DamageType, IDamageTypeGetter>(
                srcGroup: obj.DamageTypes,
                type: typeof(IDamageTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.DamageTypes,
                groupGetter: (m) => m.DamageTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Class, IClassGetter>(
                srcGroup: obj.Classes,
                type: typeof(IClassGetter),
                modKey: obj.ModKey,
                group: (m) => m.Classes,
                groupGetter: (m) => m.Classes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Faction, IFactionGetter>(
                srcGroup: obj.Factions,
                type: typeof(IFactionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Factions,
                groupGetter: (m) => m.Factions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AffinityEvent, IAffinityEventGetter>(
                srcGroup: obj.AffinityEvents,
                type: typeof(IAffinityEventGetter),
                modKey: obj.ModKey,
                group: (m) => m.AffinityEvents,
                groupGetter: (m) => m.AffinityEvents))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, HeadPart, IHeadPartGetter>(
                srcGroup: obj.HeadParts,
                type: typeof(IHeadPartGetter),
                modKey: obj.ModKey,
                group: (m) => m.HeadParts,
                groupGetter: (m) => m.HeadParts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Race, IRaceGetter>(
                srcGroup: obj.Races,
                type: typeof(IRaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Races,
                groupGetter: (m) => m.Races))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AudioOcclusionPrimitive, IAudioOcclusionPrimitiveGetter>(
                srcGroup: obj.AudioOcclusionPrimitives,
                type: typeof(IAudioOcclusionPrimitiveGetter),
                modKey: obj.ModKey,
                group: (m) => m.AudioOcclusionPrimitives,
                groupGetter: (m) => m.AudioOcclusionPrimitives))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Planet, IPlanetGetter>(
                srcGroup: obj.Planets,
                type: typeof(IPlanetGetter),
                modKey: obj.ModKey,
                group: (m) => m.Planets,
                groupGetter: (m) => m.Planets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfacePatternStyle, ISurfacePatternStyleGetter>(
                srcGroup: obj.SurfacePatternStyles,
                type: typeof(ISurfacePatternStyleGetter),
                modKey: obj.ModKey,
                group: (m) => m.SurfacePatternStyles,
                groupGetter: (m) => m.SurfacePatternStyles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Debris, IDebrisGetter>(
                srcGroup: obj.Debris,
                type: typeof(IDebrisGetter),
                modKey: obj.ModKey,
                group: (m) => m.Debris,
                groupGetter: (m) => m.Debris))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ActorValueModulation, IActorValueModulationGetter>(
                srcGroup: obj.ActorValueModulations,
                type: typeof(IActorValueModulationGetter),
                modKey: obj.ModKey,
                group: (m) => m.ActorValueModulations,
                groupGetter: (m) => m.ActorValueModulations))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BiomeSwap, IBiomeSwapGetter>(
                srcGroup: obj.BiomeSwaps,
                type: typeof(IBiomeSwapGetter),
                modKey: obj.ModKey,
                group: (m) => m.BiomeSwaps,
                groupGetter: (m) => m.BiomeSwaps))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BoneModifier, IBoneModifierGetter>(
                srcGroup: obj.BoneModifiers,
                type: typeof(IBoneModifierGetter),
                modKey: obj.ModKey,
                group: (m) => m.BoneModifiers,
                groupGetter: (m) => m.BoneModifiers))
            {
                yield return item;
            }
        }
        
        public IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IStarfieldModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                    if (!StarfieldMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GameSetting, IGameSettingGetter>(
                        srcGroup: obj.GameSettings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GameSettings,
                        groupGetter: (m) => m.GameSettings))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Keyword, IKeywordGetter>(
                        srcGroup: obj.Keywords,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Keywords,
                        groupGetter: (m) => m.Keywords))
                    {
                        yield return item;
                    }
                    yield break;
                case "FFKWRecord":
                case "IFFKWRecordGetter":
                case "IFFKWRecord":
                case "IFFKWRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FFKWRecord, IFFKWRecordGetter>(
                        srcGroup: obj.FFKW,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FFKW,
                        groupGetter: (m) => m.FFKW))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LocationReferenceType, ILocationReferenceTypeGetter>(
                        srcGroup: obj.LocationReferenceTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LocationReferenceTypes,
                        groupGetter: (m) => m.LocationReferenceTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ActionRecord, IActionRecordGetter>(
                        srcGroup: obj.Actions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Actions,
                        groupGetter: (m) => m.Actions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Transform, ITransformGetter>(
                        srcGroup: obj.Transforms,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Transforms,
                        groupGetter: (m) => m.Transforms))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, TextureSet, ITextureSetGetter>(
                        srcGroup: obj.TextureSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.TextureSets,
                        groupGetter: (m) => m.TextureSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Global, IGlobalGetter>(
                        srcGroup: obj.Globals,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Globals,
                        groupGetter: (m) => m.Globals))
                    {
                        yield return item;
                    }
                    yield break;
                case "DamageType":
                case "IDamageTypeGetter":
                case "IDamageType":
                case "IDamageTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, DamageType, IDamageTypeGetter>(
                        srcGroup: obj.DamageTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DamageTypes,
                        groupGetter: (m) => m.DamageTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Class, IClassGetter>(
                        srcGroup: obj.Classes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Classes,
                        groupGetter: (m) => m.Classes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Faction, IFactionGetter>(
                        srcGroup: obj.Factions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Factions,
                        groupGetter: (m) => m.Factions))
                    {
                        yield return item;
                    }
                    yield break;
                case "AffinityEvent":
                case "IAffinityEventGetter":
                case "IAffinityEvent":
                case "IAffinityEventInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AffinityEvent, IAffinityEventGetter>(
                        srcGroup: obj.AffinityEvents,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AffinityEvents,
                        groupGetter: (m) => m.AffinityEvents))
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, HeadPart, IHeadPartGetter>(
                        srcGroup: obj.HeadParts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.HeadParts,
                        groupGetter: (m) => m.HeadParts))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Race, IRaceGetter>(
                        srcGroup: obj.Races,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Races,
                        groupGetter: (m) => m.Races))
                    {
                        yield return item;
                    }
                    yield break;
                case "AudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveGetter":
                case "IAudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AudioOcclusionPrimitive, IAudioOcclusionPrimitiveGetter>(
                        srcGroup: obj.AudioOcclusionPrimitives,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AudioOcclusionPrimitives,
                        groupGetter: (m) => m.AudioOcclusionPrimitives))
                    {
                        yield return item;
                    }
                    yield break;
                case "Planet":
                case "IPlanetGetter":
                case "IPlanet":
                case "IPlanetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Planet, IPlanetGetter>(
                        srcGroup: obj.Planets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Planets,
                        groupGetter: (m) => m.Planets))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfacePatternStyle":
                case "ISurfacePatternStyleGetter":
                case "ISurfacePatternStyle":
                case "ISurfacePatternStyleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfacePatternStyle, ISurfacePatternStyleGetter>(
                        srcGroup: obj.SurfacePatternStyles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SurfacePatternStyles,
                        groupGetter: (m) => m.SurfacePatternStyles))
                    {
                        yield return item;
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Debris, IDebrisGetter>(
                        srcGroup: obj.Debris,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Debris,
                        groupGetter: (m) => m.Debris))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueModulation":
                case "IActorValueModulationGetter":
                case "IActorValueModulation":
                case "IActorValueModulationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ActorValueModulation, IActorValueModulationGetter>(
                        srcGroup: obj.ActorValueModulations,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ActorValueModulations,
                        groupGetter: (m) => m.ActorValueModulations))
                    {
                        yield return item;
                    }
                    yield break;
                case "BiomeSwap":
                case "IBiomeSwapGetter":
                case "IBiomeSwap":
                case "IBiomeSwapInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BiomeSwap, IBiomeSwapGetter>(
                        srcGroup: obj.BiomeSwaps,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.BiomeSwaps,
                        groupGetter: (m) => m.BiomeSwaps))
                    {
                        yield return item;
                    }
                    yield break;
                case "BoneModifier":
                case "IBoneModifierGetter":
                case "IBoneModifier":
                case "IBoneModifierInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BoneModifier, IBoneModifierGetter>(
                        srcGroup: obj.BoneModifiers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.BoneModifiers,
                        groupGetter: (m) => m.BoneModifiers))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<IStarfieldModGetter, IStarfieldMod, IStarfieldModGetter>(
                        GameCategory.Starfield,
                        obj,
                        type,
                        linkCache,
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public static partial IEnumerable<IAssetLinkGetter> GetInferredAssetLinks(IStarfieldModGetter obj, Type? assetType);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IStarfieldModGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            if (queryCategories.HasFlag(AssetLinkQuery.Inferred))
            {
                foreach (var additional in GetInferredAssetLinks(obj, assetType))
                {
                    yield return additional;
                }
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                if (obj.Keywords is IAssetLinkContainerGetter KeywordslinkCont)
                {
                    foreach (var item in KeywordslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                    {
                        yield return item;
                    }
                }
                if (obj.LocationReferenceTypes is IAssetLinkContainerGetter LocationReferenceTypeslinkCont)
                {
                    foreach (var item in LocationReferenceTypeslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                    {
                        yield return item;
                    }
                }
                if (obj.Globals is IAssetLinkContainerGetter GlobalslinkCont)
                {
                    foreach (var item in GlobalslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                    {
                        yield return item;
                    }
                }
                if (obj.Factions is IAssetLinkContainerGetter FactionslinkCont)
                {
                    foreach (var item in FactionslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                    {
                        yield return item;
                    }
                }
                if (obj.HeadParts is IAssetLinkContainerGetter HeadPartslinkCont)
                {
                    foreach (var item in HeadPartslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                    {
                        yield return item;
                    }
                }
                foreach (var item in obj.Races.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
                if (obj.Planets is IAssetLinkContainerGetter PlanetslinkCont)
                {
                    foreach (var item in PlanetslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                    {
                        yield return item;
                    }
                }
                foreach (var item in obj.Debris.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
                if (obj.ActorValueModulations is IAssetLinkContainerGetter ActorValueModulationslinkCont)
                {
                    foreach (var item in ActorValueModulationslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                    {
                        yield return item;
                    }
                }
                if (obj.BoneModifiers is IAssetLinkContainerGetter BoneModifierslinkCont)
                {
                    foreach (var item in BoneModifierslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                    {
                        yield return item;
                    }
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class StarfieldModSetterTranslationCommon
    {
        public static readonly StarfieldModSetterTranslationCommon Instance = new StarfieldModSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStarfieldMod item,
            IStarfieldModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Keywords);
                try
                {
                    item.Keywords.DeepCopyIn(
                        rhs: rhs.Keywords,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Keywords));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FFKW) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.FFKW);
                try
                {
                    item.FFKW.DeepCopyIn(
                        rhs: rhs.FFKW,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.FFKW));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LocationReferenceTypes);
                try
                {
                    item.LocationReferenceTypes.DeepCopyIn(
                        rhs: rhs.LocationReferenceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LocationReferenceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Actions) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Actions);
                try
                {
                    item.Actions.DeepCopyIn(
                        rhs: rhs.Actions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Actions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Transforms) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Transforms);
                try
                {
                    item.Transforms.DeepCopyIn(
                        rhs: rhs.Transforms,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Transforms));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.TextureSets) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.TextureSets);
                try
                {
                    item.TextureSets.DeepCopyIn(
                        rhs: rhs.TextureSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.TextureSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.DamageTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.DamageTypes);
                try
                {
                    item.DamageTypes.DeepCopyIn(
                        rhs: rhs.DamageTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.DamageTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyIn(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyIn(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AffinityEvents) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AffinityEvents);
                try
                {
                    item.AffinityEvents.DeepCopyIn(
                        rhs: rhs.AffinityEvents,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AffinityEvents));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.DeepCopyIn(
                        rhs: rhs.HeadParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.HeadParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyIn(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives);
                try
                {
                    item.AudioOcclusionPrimitives.DeepCopyIn(
                        rhs: rhs.AudioOcclusionPrimitives,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Planets) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Planets);
                try
                {
                    item.Planets.DeepCopyIn(
                        rhs: rhs.Planets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Planets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfacePatternStyles) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SurfacePatternStyles);
                try
                {
                    item.SurfacePatternStyles.DeepCopyIn(
                        rhs: rhs.SurfacePatternStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SurfacePatternStyles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Debris) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Debris);
                try
                {
                    item.Debris.DeepCopyIn(
                        rhs: rhs.Debris,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Debris));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ActorValueModulations) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ActorValueModulations);
                try
                {
                    item.ActorValueModulations.DeepCopyIn(
                        rhs: rhs.ActorValueModulations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ActorValueModulations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BiomeSwaps) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.BiomeSwaps);
                try
                {
                    item.BiomeSwaps.DeepCopyIn(
                        rhs: rhs.BiomeSwaps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.BiomeSwaps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BoneModifiers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.BoneModifiers);
                try
                {
                    item.BoneModifiers.DeepCopyIn(
                        rhs: rhs.BoneModifiers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.BoneModifiers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public StarfieldMod DeepCopy(
            IStarfieldModGetter item,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            StarfieldMod ret = (StarfieldMod)((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).GetNew();
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StarfieldMod DeepCopy(
            IStarfieldModGetter item,
            out StarfieldMod.ErrorMask errorMask,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            StarfieldMod ret = (StarfieldMod)((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).GetNew();
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StarfieldMod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StarfieldMod DeepCopy(
            IStarfieldModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            StarfieldMod ret = (StarfieldMod)((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).GetNew();
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class StarfieldMod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StarfieldMod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StarfieldMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StarfieldModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return StarfieldModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StarfieldModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Mutagen
namespace Mutagen.Bethesda.Starfield
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Keywords;
        public bool FFKW;
        public bool LocationReferenceTypes;
        public bool Actions;
        public bool Transforms;
        public bool TextureSets;
        public bool Globals;
        public bool DamageTypes;
        public bool Classes;
        public bool Factions;
        public bool AffinityEvents;
        public bool HeadParts;
        public bool Races;
        public bool AudioOcclusionPrimitives;
        public bool Planets;
        public bool SurfacePatternStyles;
        public bool Debris;
        public bool ActorValueModulations;
        public bool BiomeSwaps;
        public bool BoneModifiers;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Keywords = defaultValue;
            FFKW = defaultValue;
            LocationReferenceTypes = defaultValue;
            Actions = defaultValue;
            Transforms = defaultValue;
            TextureSets = defaultValue;
            Globals = defaultValue;
            DamageTypes = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            AffinityEvents = defaultValue;
            HeadParts = defaultValue;
            Races = defaultValue;
            AudioOcclusionPrimitives = defaultValue;
            Planets = defaultValue;
            SurfacePatternStyles = defaultValue;
            Debris = defaultValue;
            ActorValueModulations = defaultValue;
            BiomeSwaps = defaultValue;
            BoneModifiers = defaultValue;
        }
    }

    public interface IStarfieldModDisposableGetter : IStarfieldModGetter, IModDisposeGetter
    {
    }

}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class StarfieldMod_Registration : IModRegistration
    {
        public GameCategory GameCategory => GameCategory.Starfield;
    }

}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class StarfieldModBinaryWriteTranslation
    {
        public static readonly StarfieldModBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IStarfieldModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            TypedWriteParams translationParams = default)
        {
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Keywords ?? true)
            {
                var KeywordsItem = item.Keywords;
                if (KeywordsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)KeywordsItem).BinaryWriteTranslator).Write<IKeywordGetter>(
                        item: KeywordsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FFKW ?? true)
            {
                var FFKWItem = item.FFKW;
                if (FFKWItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FFKWItem).BinaryWriteTranslator).Write<IFFKWRecordGetter>(
                        item: FFKWItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LocationReferenceTypes ?? true)
            {
                var LocationReferenceTypesItem = item.LocationReferenceTypes;
                if (LocationReferenceTypesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LocationReferenceTypesItem).BinaryWriteTranslator).Write<ILocationReferenceTypeGetter>(
                        item: LocationReferenceTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Actions ?? true)
            {
                var ActionsItem = item.Actions;
                if (ActionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ActionsItem).BinaryWriteTranslator).Write<IActionRecordGetter>(
                        item: ActionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Transforms ?? true)
            {
                var TransformsItem = item.Transforms;
                if (TransformsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)TransformsItem).BinaryWriteTranslator).Write<ITransformGetter>(
                        item: TransformsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.TextureSets ?? true)
            {
                var TextureSetsItem = item.TextureSets;
                if (TextureSetsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)TextureSetsItem).BinaryWriteTranslator).Write<ITextureSetGetter>(
                        item: TextureSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Globals ?? true)
            {
                var GlobalsItem = item.Globals;
                if (GlobalsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GlobalsItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: GlobalsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DamageTypes ?? true)
            {
                var DamageTypesItem = item.DamageTypes;
                if (DamageTypesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)DamageTypesItem).BinaryWriteTranslator).Write<IDamageTypeGetter>(
                        item: DamageTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Classes ?? true)
            {
                var ClassesItem = item.Classes;
                if (ClassesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ClassesItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: ClassesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Factions ?? true)
            {
                var FactionsItem = item.Factions;
                if (FactionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FactionsItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: FactionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AffinityEvents ?? true)
            {
                var AffinityEventsItem = item.AffinityEvents;
                if (AffinityEventsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AffinityEventsItem).BinaryWriteTranslator).Write<IAffinityEventGetter>(
                        item: AffinityEventsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.HeadParts ?? true)
            {
                var HeadPartsItem = item.HeadParts;
                if (HeadPartsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)HeadPartsItem).BinaryWriteTranslator).Write<IHeadPartGetter>(
                        item: HeadPartsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Races ?? true)
            {
                var RacesItem = item.Races;
                if (RacesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)RacesItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: RacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AudioOcclusionPrimitives ?? true)
            {
                var AudioOcclusionPrimitivesItem = item.AudioOcclusionPrimitives;
                if (AudioOcclusionPrimitivesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AudioOcclusionPrimitivesItem).BinaryWriteTranslator).Write<IAudioOcclusionPrimitiveGetter>(
                        item: AudioOcclusionPrimitivesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Planets ?? true)
            {
                var PlanetsItem = item.Planets;
                if (PlanetsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)PlanetsItem).BinaryWriteTranslator).Write<IPlanetGetter>(
                        item: PlanetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SurfacePatternStyles ?? true)
            {
                var SurfacePatternStylesItem = item.SurfacePatternStyles;
                if (SurfacePatternStylesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SurfacePatternStylesItem).BinaryWriteTranslator).Write<ISurfacePatternStyleGetter>(
                        item: SurfacePatternStylesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Debris ?? true)
            {
                var DebrisItem = item.Debris;
                if (DebrisItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)DebrisItem).BinaryWriteTranslator).Write<IDebrisGetter>(
                        item: DebrisItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ActorValueModulations ?? true)
            {
                var ActorValueModulationsItem = item.ActorValueModulations;
                if (ActorValueModulationsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ActorValueModulationsItem).BinaryWriteTranslator).Write<IActorValueModulationGetter>(
                        item: ActorValueModulationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.BiomeSwaps ?? true)
            {
                var BiomeSwapsItem = item.BiomeSwaps;
                if (BiomeSwapsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)BiomeSwapsItem).BinaryWriteTranslator).Write<IBiomeSwapGetter>(
                        item: BiomeSwapsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.BoneModifiers ?? true)
            {
                var BoneModifiersItem = item.BoneModifiers;
                if (BoneModifiersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)BoneModifiersItem).BinaryWriteTranslator).Write<IBoneModifierGetter>(
                        item: BoneModifiersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IStarfieldModGetter item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            Write(
                item: (IStarfieldModGetter)item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

    }

    internal partial class StarfieldModBinaryCreateTranslation
    {
        public static readonly StarfieldModBinaryCreateTranslation Instance = new StarfieldModBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IStarfieldMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        translationParams: null);
                    return (int)StarfieldMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    if (importMask?.Keywords ?? true)
                    {
                        item.Keywords.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Keywords;
                }
                case RecordTypeInts.FFKW:
                {
                    if (importMask?.FFKW ?? true)
                    {
                        item.FFKW.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.FFKW;
                }
                case RecordTypeInts.LCRT:
                {
                    if (importMask?.LocationReferenceTypes ?? true)
                    {
                        item.LocationReferenceTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    if (importMask?.Actions ?? true)
                    {
                        item.Actions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Actions;
                }
                case RecordTypeInts.TRNS:
                {
                    if (importMask?.Transforms ?? true)
                    {
                        item.Transforms.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Transforms;
                }
                case RecordTypeInts.TXST:
                {
                    if (importMask?.TextureSets ?? true)
                    {
                        item.TextureSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    if (importMask?.Globals ?? true)
                    {
                        item.Globals.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Globals;
                }
                case RecordTypeInts.DMGT:
                {
                    if (importMask?.DamageTypes ?? true)
                    {
                        item.DamageTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.DamageTypes;
                }
                case RecordTypeInts.CLAS:
                {
                    if (importMask?.Classes ?? true)
                    {
                        item.Classes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    if (importMask?.Factions ?? true)
                    {
                        item.Factions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Factions;
                }
                case RecordTypeInts.AFFE:
                {
                    if (importMask?.AffinityEvents ?? true)
                    {
                        item.AffinityEvents.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AffinityEvents;
                }
                case RecordTypeInts.HDPT:
                {
                    if (importMask?.HeadParts ?? true)
                    {
                        item.HeadParts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.RACE:
                {
                    if (importMask?.Races ?? true)
                    {
                        item.Races.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Races;
                }
                case RecordTypeInts.AOPF:
                {
                    if (importMask?.AudioOcclusionPrimitives ?? true)
                    {
                        item.AudioOcclusionPrimitives.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives;
                }
                case RecordTypeInts.PNDT:
                {
                    if (importMask?.Planets ?? true)
                    {
                        item.Planets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Planets;
                }
                case RecordTypeInts.PTST:
                {
                    if (importMask?.SurfacePatternStyles ?? true)
                    {
                        item.SurfacePatternStyles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SurfacePatternStyles;
                }
                case RecordTypeInts.DEBR:
                {
                    if (importMask?.Debris ?? true)
                    {
                        item.Debris.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Debris;
                }
                case RecordTypeInts.AVMD:
                {
                    if (importMask?.ActorValueModulations ?? true)
                    {
                        item.ActorValueModulations.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ActorValueModulations;
                }
                case RecordTypeInts.OSWP:
                {
                    if (importMask?.BiomeSwaps ?? true)
                    {
                        item.BiomeSwaps.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.BiomeSwaps;
                }
                case RecordTypeInts.BMOD:
                {
                    if (importMask?.BoneModifiers ?? true)
                    {
                        item.BoneModifiers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.BoneModifiers;
                }
                default:
                    frame.Position += contentLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class StarfieldModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IStarfieldModGetter item,
            MutagenWriter writer,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            var modKey = item.ModKey;
            StarfieldModBinaryWriteTranslation.Instance.Write(
                item: item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

        public static void WriteToBinary(
            this IStarfieldModGetter item,
            FilePath path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null,
            IFileSystem? fileSystem = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            param.StringsWriter ??= (Enums.HasFlag((int)item.ModHeader.Flags, (int)ModHeaderCommonFlag.Localized) ? new StringsWriter(GameRelease.Starfield, modKey, Path.Combine(Path.GetDirectoryName(path)!, "Strings"), MutagenEncodingProvider.Instance) : null);
            bool disposeStrings = param.StringsWriter != null;
            var bundle = new WritingBundle(GameRelease.Starfield)
            {
                StringsWriter = param.StringsWriter,
                CleanNulls = param.CleanNulls,
                TargetLanguageOverride = param.TargetLanguageOverride
            };
            if (param.Encodings != null)
            {
                bundle.Encodings = param.Encodings;
            }
            using var memStream = new MemoryTributary();
            using (var writer = new MutagenWriter(
                memStream,
                bundle,
                dispose: false))
            {
                StarfieldModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
            using (var fs = fileSystem.GetOrDefault().FileStream.Create(path, FileMode.Create, FileAccess.Write))
            {
                memStream.Position = 0;
                memStream.CopyTo(fs);
            }
            if (disposeStrings)
            {
                param.StringsWriter?.Dispose();
            }
        }

        public static void WriteToBinary(
            this IStarfieldModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(
                stream: stream,
                new WritingBundle(GameRelease.Starfield),
                dispose: false))
            {
                StarfieldModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    [DebuggerDisplay("{GameRelease} {ModKey.ToString()}")]
    internal partial class StarfieldModBinaryOverlay : IStarfieldModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StarfieldMod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StarfieldMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StarfieldModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StarfieldModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IStarfieldModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public GameRelease GameRelease => GameRelease.Starfield;
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param, IFileSystem? fileSystem) => this.WriteToBinary(path, importMask: null, param: param, fileSystem: fileSystem);
        void IModGetter.WriteToBinaryParallel(FilePath path, BinaryWriteParameters? param, IFileSystem? fileSystem, ParallelWriteParameters? parallelWriteParams) => this.WriteToBinaryParallel(path, param: param, fileSystem: fileSystem, parallelParam: parallelWriteParams);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(Stream stream, BinaryWriteParameters? param, ParallelWriteParameters? parallelWriteParams) => this.WriteToBinaryParallel(stream, param, parallelParam: parallelWriteParams);
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public bool CanUseLocalization => true;
        public bool UsingLocalization => this.ModHeader.Flags.HasFlag(StarfieldModHeader.HeaderFlag.Localized);
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StarfieldModCommon.Instance.EnumerateFormLinks(this);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => StarfieldModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        uint IModGetter.NextFormID => ModHeader.Stats.NextFormID;
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _stream;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _stream.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private IStarfieldModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? StarfieldModHeaderBinaryOverlay.StarfieldModHeaderFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max), _package) : default;
        public IStarfieldModHeaderGetter ModHeader => _ModHeader ?? new StarfieldModHeader();
        #endregion
        #region GameSettings
        private List<RangeInt64>? _GameSettingsLocations;
        private IStarfieldGroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocations != null ? StarfieldGroupBinaryOverlay<IGameSettingGetter>.StarfieldGroupFactory(_stream, _GameSettingsLocations, _package) : default;
        public IStarfieldGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new StarfieldGroup<GameSetting>(this);
        #endregion
        #region Keywords
        private List<RangeInt64>? _KeywordsLocations;
        private IStarfieldGroupGetter<IKeywordGetter>? _Keywords => _KeywordsLocations != null ? StarfieldGroupBinaryOverlay<IKeywordGetter>.StarfieldGroupFactory(_stream, _KeywordsLocations, _package) : default;
        public IStarfieldGroupGetter<IKeywordGetter> Keywords => _Keywords ?? new StarfieldGroup<Keyword>(this);
        #endregion
        #region FFKW
        private List<RangeInt64>? _FFKWLocations;
        private IStarfieldGroupGetter<IFFKWRecordGetter>? _FFKW => _FFKWLocations != null ? StarfieldGroupBinaryOverlay<IFFKWRecordGetter>.StarfieldGroupFactory(_stream, _FFKWLocations, _package) : default;
        public IStarfieldGroupGetter<IFFKWRecordGetter> FFKW => _FFKW ?? new StarfieldGroup<FFKWRecord>(this);
        #endregion
        #region LocationReferenceTypes
        private List<RangeInt64>? _LocationReferenceTypesLocations;
        private IStarfieldGroupGetter<ILocationReferenceTypeGetter>? _LocationReferenceTypes => _LocationReferenceTypesLocations != null ? StarfieldGroupBinaryOverlay<ILocationReferenceTypeGetter>.StarfieldGroupFactory(_stream, _LocationReferenceTypesLocations, _package) : default;
        public IStarfieldGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes => _LocationReferenceTypes ?? new StarfieldGroup<LocationReferenceType>(this);
        #endregion
        #region Actions
        private List<RangeInt64>? _ActionsLocations;
        private IStarfieldGroupGetter<IActionRecordGetter>? _Actions => _ActionsLocations != null ? StarfieldGroupBinaryOverlay<IActionRecordGetter>.StarfieldGroupFactory(_stream, _ActionsLocations, _package) : default;
        public IStarfieldGroupGetter<IActionRecordGetter> Actions => _Actions ?? new StarfieldGroup<ActionRecord>(this);
        #endregion
        #region Transforms
        private List<RangeInt64>? _TransformsLocations;
        private IStarfieldGroupGetter<ITransformGetter>? _Transforms => _TransformsLocations != null ? StarfieldGroupBinaryOverlay<ITransformGetter>.StarfieldGroupFactory(_stream, _TransformsLocations, _package) : default;
        public IStarfieldGroupGetter<ITransformGetter> Transforms => _Transforms ?? new StarfieldGroup<Transform>(this);
        #endregion
        #region TextureSets
        private List<RangeInt64>? _TextureSetsLocations;
        private IStarfieldGroupGetter<ITextureSetGetter>? _TextureSets => _TextureSetsLocations != null ? StarfieldGroupBinaryOverlay<ITextureSetGetter>.StarfieldGroupFactory(_stream, _TextureSetsLocations, _package) : default;
        public IStarfieldGroupGetter<ITextureSetGetter> TextureSets => _TextureSets ?? new StarfieldGroup<TextureSet>(this);
        #endregion
        #region Globals
        private List<RangeInt64>? _GlobalsLocations;
        private IStarfieldGroupGetter<IGlobalGetter>? _Globals => _GlobalsLocations != null ? StarfieldGroupBinaryOverlay<IGlobalGetter>.StarfieldGroupFactory(_stream, _GlobalsLocations, _package) : default;
        public IStarfieldGroupGetter<IGlobalGetter> Globals => _Globals ?? new StarfieldGroup<Global>(this);
        #endregion
        #region DamageTypes
        private List<RangeInt64>? _DamageTypesLocations;
        private IStarfieldGroupGetter<IDamageTypeGetter>? _DamageTypes => _DamageTypesLocations != null ? StarfieldGroupBinaryOverlay<IDamageTypeGetter>.StarfieldGroupFactory(_stream, _DamageTypesLocations, _package) : default;
        public IStarfieldGroupGetter<IDamageTypeGetter> DamageTypes => _DamageTypes ?? new StarfieldGroup<DamageType>(this);
        #endregion
        #region Classes
        private List<RangeInt64>? _ClassesLocations;
        private IStarfieldGroupGetter<IClassGetter>? _Classes => _ClassesLocations != null ? StarfieldGroupBinaryOverlay<IClassGetter>.StarfieldGroupFactory(_stream, _ClassesLocations, _package) : default;
        public IStarfieldGroupGetter<IClassGetter> Classes => _Classes ?? new StarfieldGroup<Class>(this);
        #endregion
        #region Factions
        private List<RangeInt64>? _FactionsLocations;
        private IStarfieldGroupGetter<IFactionGetter>? _Factions => _FactionsLocations != null ? StarfieldGroupBinaryOverlay<IFactionGetter>.StarfieldGroupFactory(_stream, _FactionsLocations, _package) : default;
        public IStarfieldGroupGetter<IFactionGetter> Factions => _Factions ?? new StarfieldGroup<Faction>(this);
        #endregion
        #region AffinityEvents
        private List<RangeInt64>? _AffinityEventsLocations;
        private IStarfieldGroupGetter<IAffinityEventGetter>? _AffinityEvents => _AffinityEventsLocations != null ? StarfieldGroupBinaryOverlay<IAffinityEventGetter>.StarfieldGroupFactory(_stream, _AffinityEventsLocations, _package) : default;
        public IStarfieldGroupGetter<IAffinityEventGetter> AffinityEvents => _AffinityEvents ?? new StarfieldGroup<AffinityEvent>(this);
        #endregion
        #region HeadParts
        private List<RangeInt64>? _HeadPartsLocations;
        private IStarfieldGroupGetter<IHeadPartGetter>? _HeadParts => _HeadPartsLocations != null ? StarfieldGroupBinaryOverlay<IHeadPartGetter>.StarfieldGroupFactory(_stream, _HeadPartsLocations, _package) : default;
        public IStarfieldGroupGetter<IHeadPartGetter> HeadParts => _HeadParts ?? new StarfieldGroup<HeadPart>(this);
        #endregion
        #region Races
        private List<RangeInt64>? _RacesLocations;
        private IStarfieldGroupGetter<IRaceGetter>? _Races => _RacesLocations != null ? StarfieldGroupBinaryOverlay<IRaceGetter>.StarfieldGroupFactory(_stream, _RacesLocations, _package) : default;
        public IStarfieldGroupGetter<IRaceGetter> Races => _Races ?? new StarfieldGroup<Race>(this);
        #endregion
        #region AudioOcclusionPrimitives
        private List<RangeInt64>? _AudioOcclusionPrimitivesLocations;
        private IStarfieldGroupGetter<IAudioOcclusionPrimitiveGetter>? _AudioOcclusionPrimitives => _AudioOcclusionPrimitivesLocations != null ? StarfieldGroupBinaryOverlay<IAudioOcclusionPrimitiveGetter>.StarfieldGroupFactory(_stream, _AudioOcclusionPrimitivesLocations, _package) : default;
        public IStarfieldGroupGetter<IAudioOcclusionPrimitiveGetter> AudioOcclusionPrimitives => _AudioOcclusionPrimitives ?? new StarfieldGroup<AudioOcclusionPrimitive>(this);
        #endregion
        #region Planets
        private List<RangeInt64>? _PlanetsLocations;
        private IStarfieldGroupGetter<IPlanetGetter>? _Planets => _PlanetsLocations != null ? StarfieldGroupBinaryOverlay<IPlanetGetter>.StarfieldGroupFactory(_stream, _PlanetsLocations, _package) : default;
        public IStarfieldGroupGetter<IPlanetGetter> Planets => _Planets ?? new StarfieldGroup<Planet>(this);
        #endregion
        #region SurfacePatternStyles
        private List<RangeInt64>? _SurfacePatternStylesLocations;
        private IStarfieldGroupGetter<ISurfacePatternStyleGetter>? _SurfacePatternStyles => _SurfacePatternStylesLocations != null ? StarfieldGroupBinaryOverlay<ISurfacePatternStyleGetter>.StarfieldGroupFactory(_stream, _SurfacePatternStylesLocations, _package) : default;
        public IStarfieldGroupGetter<ISurfacePatternStyleGetter> SurfacePatternStyles => _SurfacePatternStyles ?? new StarfieldGroup<SurfacePatternStyle>(this);
        #endregion
        #region Debris
        private List<RangeInt64>? _DebrisLocations;
        private IStarfieldGroupGetter<IDebrisGetter>? _Debris => _DebrisLocations != null ? StarfieldGroupBinaryOverlay<IDebrisGetter>.StarfieldGroupFactory(_stream, _DebrisLocations, _package) : default;
        public IStarfieldGroupGetter<IDebrisGetter> Debris => _Debris ?? new StarfieldGroup<Debris>(this);
        #endregion
        #region ActorValueModulations
        private List<RangeInt64>? _ActorValueModulationsLocations;
        private IStarfieldGroupGetter<IActorValueModulationGetter>? _ActorValueModulations => _ActorValueModulationsLocations != null ? StarfieldGroupBinaryOverlay<IActorValueModulationGetter>.StarfieldGroupFactory(_stream, _ActorValueModulationsLocations, _package) : default;
        public IStarfieldGroupGetter<IActorValueModulationGetter> ActorValueModulations => _ActorValueModulations ?? new StarfieldGroup<ActorValueModulation>(this);
        #endregion
        #region BiomeSwaps
        private List<RangeInt64>? _BiomeSwapsLocations;
        private IStarfieldGroupGetter<IBiomeSwapGetter>? _BiomeSwaps => _BiomeSwapsLocations != null ? StarfieldGroupBinaryOverlay<IBiomeSwapGetter>.StarfieldGroupFactory(_stream, _BiomeSwapsLocations, _package) : default;
        public IStarfieldGroupGetter<IBiomeSwapGetter> BiomeSwaps => _BiomeSwaps ?? new StarfieldGroup<BiomeSwap>(this);
        #endregion
        #region BoneModifiers
        private List<RangeInt64>? _BoneModifiersLocations;
        private IStarfieldGroupGetter<IBoneModifierGetter>? _BoneModifiers => _BoneModifiersLocations != null ? StarfieldGroupBinaryOverlay<IBoneModifierGetter>.StarfieldGroupFactory(_stream, _BoneModifiersLocations, _package) : default;
        public IStarfieldGroupGetter<IBoneModifierGetter> BoneModifiers => _BoneModifiers ?? new StarfieldGroup<BoneModifier>(this);
        #endregion
        protected StarfieldModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            this.ModKey = modKey;
            this._stream = stream;
            this._package = new BinaryOverlayFactoryPackage(stream.MetaData);
            this._shouldDispose = shouldDispose;
        }

        public static StarfieldModBinaryOverlay StarfieldModFactory(
            ModPath path,
            StringsReadParameters? stringsParam = null,
            IFileSystem? fileSystem = null)
        {
            var meta = new ParsingBundle(GameRelease.Starfield, new MasterReferenceCollection(path.ModKey))
            {
                RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem))
            };
            var stream = new MutagenBinaryReadStream(
                path: path.Path,
                metaData: meta,
                fileSystem: fileSystem);
            try
            {
                meta.Absorb(stringsParam);
                if (stream.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = stream.GetInt32(offset: 8);
                if (Enums.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                {
                    meta.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(GameRelease.Starfield, path.ModKey, Path.GetDirectoryName(path.Path)!, stringsParam);
                }
                return StarfieldModFactory(
                    stream: stream,
                    path.ModKey,
                    shouldDispose: true);
            }
            catch (Exception)
            {
                stream.Dispose();
                throw;
            }
        }

        public static StarfieldModBinaryOverlay StarfieldModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            var ret = new StarfieldModBinaryOverlay(
                stream: stream,
                modKey: modKey,
                shouldDispose: shouldDispose);
            PluginBinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public ParseResult FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    _package.MetaData.MasterReferences!.SetTo(
                        this.ModHeader.MasterReferences.Select(
                            master => new MasterReference()
                            {
                                Master = master.Master,
                                FileSize = master.FileSize,
                            }));
                    return (int)StarfieldMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    _GameSettingsLocations ??= new();
                    _GameSettingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    _KeywordsLocations ??= new();
                    _KeywordsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Keywords;
                }
                case RecordTypeInts.FFKW:
                {
                    _FFKWLocations ??= new();
                    _FFKWLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.FFKW;
                }
                case RecordTypeInts.LCRT:
                {
                    _LocationReferenceTypesLocations ??= new();
                    _LocationReferenceTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    _ActionsLocations ??= new();
                    _ActionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Actions;
                }
                case RecordTypeInts.TRNS:
                {
                    _TransformsLocations ??= new();
                    _TransformsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Transforms;
                }
                case RecordTypeInts.TXST:
                {
                    _TextureSetsLocations ??= new();
                    _TextureSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    _GlobalsLocations ??= new();
                    _GlobalsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Globals;
                }
                case RecordTypeInts.DMGT:
                {
                    _DamageTypesLocations ??= new();
                    _DamageTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.DamageTypes;
                }
                case RecordTypeInts.CLAS:
                {
                    _ClassesLocations ??= new();
                    _ClassesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    _FactionsLocations ??= new();
                    _FactionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Factions;
                }
                case RecordTypeInts.AFFE:
                {
                    _AffinityEventsLocations ??= new();
                    _AffinityEventsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AffinityEvents;
                }
                case RecordTypeInts.HDPT:
                {
                    _HeadPartsLocations ??= new();
                    _HeadPartsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.RACE:
                {
                    _RacesLocations ??= new();
                    _RacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Races;
                }
                case RecordTypeInts.AOPF:
                {
                    _AudioOcclusionPrimitivesLocations ??= new();
                    _AudioOcclusionPrimitivesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives;
                }
                case RecordTypeInts.PNDT:
                {
                    _PlanetsLocations ??= new();
                    _PlanetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Planets;
                }
                case RecordTypeInts.PTST:
                {
                    _SurfacePatternStylesLocations ??= new();
                    _SurfacePatternStylesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SurfacePatternStyles;
                }
                case RecordTypeInts.DEBR:
                {
                    _DebrisLocations ??= new();
                    _DebrisLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Debris;
                }
                case RecordTypeInts.AVMD:
                {
                    _ActorValueModulationsLocations ??= new();
                    _ActorValueModulationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ActorValueModulations;
                }
                case RecordTypeInts.OSWP:
                {
                    _BiomeSwapsLocations ??= new();
                    _BiomeSwapsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.BiomeSwaps;
                }
                case RecordTypeInts.BMOD:
                {
                    _BoneModifiersLocations ??= new();
                    _BoneModifiersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.BoneModifiers;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarfieldModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStarfieldModGetter rhs) return false;
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarfieldModGetter? obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => StarfieldModMixIn.GetEqualsMask(this, (IStarfieldModGetter)rhs, include);
    }

}
#endregion

#endregion

